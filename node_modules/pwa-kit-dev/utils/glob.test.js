"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _glob = require("./glob");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
test('Matcher with no patterns matches nothing', () => {
  const matcher = new _glob.Matcher();
  expect(matcher.matches('')).toBe(false);
  expect(matcher.matches('a.js')).toBe(false);
  expect(matcher.matches()).toBe(false);
});
describe('Matcher class filters correctly', () => {
  const patterns = ['ssr.js', '**/*.jpg', '!**/no.jpg', 'abc.{js,jsx}'];
  const matcher = new _glob.Matcher(patterns); // Paths we expect to match

  const expectToMatch = ['ssr.js', 'test1.jpg', 'static/test2.jpg', 'static/assets/test3.jpg', 'abc.js', 'abc.jsx'];
  expectToMatch.forEach(path => test(`Expect path "${path}" to match`, () => {
    _assert.default.ok(matcher.matches(path), `Expected path "${path}" to be matched`);
  })); // Paths we expect not to match

  const expectNotToMatch = ['ssrxjs', 'subdirectory/ssr.js', 'no.jpg', 'static/no.jpg', 'abc.jsz'];
  expectNotToMatch.forEach(path => test(`Expect path "${path}" to NOT match`, () => {
    _assert.default.ok(!matcher.matches(path), `Expected path "${path}" to NOT be matched`);
  })); // Combine the paths into one array and shuffle it

  const allPaths = expectToMatch.concat(expectNotToMatch).sort(() => Math.random() - 0.5);
  test('Matcher.filter works', () => {
    const matched = allPaths.filter(matcher.filter);

    _assert.default.strictEqual(matched.length, expectToMatch.length, 'Expected that all matches would be returned by filter');
  });
});