"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createModuleReplacementPlugin = void 0;

var _webpack = _interopRequireDefault(require("webpack"));

var _path = _interopRequireWildcard(require("path"));

var _fs = _interopRequireDefault(require("fs"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

/**
 * Allows users to override special SDK components by placing override
 * files in certain magic locations in a project.
 *
 * @param {string} projectDir - absolute path to the project root.
 * @returns {webpack.NormalModuleReplacementPlugin}
 */
const createModuleReplacementPlugin = projectDir => {
  const makeRegExp = (str, sep = _path.default.sep) => {
    // Replace unix paths with windows if needed and build a RegExp
    if (sep === '\\') {
      str = str.replace(/\//g, '\\\\');
    }

    return new RegExp(str);
  };

  const overridables = [{
    path: makeRegExp('pwa-kit-react-sdk(/dist)?/ssr/universal/components/_app-config$'),
    newPath: (0, _path.resolve)(projectDir, 'app', 'components', '_app-config', 'index')
  }, {
    path: makeRegExp('pwa-kit-react-sdk(/dist)?/ssr/universal/components/_document$'),
    newPath: (0, _path.resolve)(projectDir, 'app', 'components', '_document', 'index')
  }, {
    path: makeRegExp('pwa-kit-react-sdk(/dist)?/ssr/universal/components/_app$'),
    newPath: (0, _path.resolve)(projectDir, 'app', 'components', '_app', 'index')
  }, {
    path: makeRegExp('pwa-kit-react-sdk(/dist)?/ssr/universal/components/_error$'),
    newPath: (0, _path.resolve)(projectDir, 'app', 'components', '_error', 'index')
  }, {
    path: makeRegExp('pwa-kit-react-sdk(/dist)?/ssr/universal/routes$'),
    newPath: (0, _path.resolve)(projectDir, 'app', 'routes')
  }];
  const extensions = ['.ts', '.tsx', '.js', '.jsx'];
  const replacements = [];
  overridables.forEach(({
    path,
    newPath
  }) => {
    extensions.forEach(ext => {
      const replacement = newPath + ext;

      if (_fs.default.existsSync(replacement)) {
        replacements.push({
          path,
          newPath: replacement
        });
      }
    });
  });
  return new _webpack.default.NormalModuleReplacementPlugin(/.*/, resource => {
    const resolved = _path.default.resolve(resource.context, resource.request);

    const replacement = replacements.find(({
      path
    }) => resolved.match(path));
    const sdkPaths = [_path.default.join('packages', 'pwa-kit-react-sdk'), _path.default.join('node_modules', 'pwa-kit-react-sdk')];
    const requestedFromSDK = sdkPaths.some(p => resource.context.includes(p));

    if (requestedFromSDK && replacement) {
      resource.request = replacement.newPath;
    }
  });
};

exports.createModuleReplacementPlugin = createModuleReplacementPlugin;