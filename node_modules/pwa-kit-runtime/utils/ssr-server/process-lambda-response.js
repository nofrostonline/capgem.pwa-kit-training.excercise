"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processLambdaResponse = void 0;

var _constants = require("../../ssr/server/constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const processLambdaResponse = response => {
  var _response$headers;

  if (!response) return response; // If the response contains an X_ORIGINAL_CONTENT_TYPE header,
  // then replace the current CONTENT_TYPE header with it.

  const originalContentType = (_response$headers = response.headers) === null || _response$headers === void 0 ? void 0 : _response$headers[_constants.X_ORIGINAL_CONTENT_TYPE]; // Nothing to modify, can return original

  if (!originalContentType) return response;

  const result = _objectSpread(_objectSpread({}, response), {}, {
    headers: _objectSpread(_objectSpread({}, response.headers), {}, {
      [_constants.CONTENT_TYPE]: originalContentType
    })
  });

  delete result.headers[_constants.X_ORIGINAL_CONTENT_TYPE];
  return result;
};

exports.processLambdaResponse = processLambdaResponse;