/*
* Copyright (c) 2021, salesforce.com, inc.
* All rights reserved.
* SPDX-License-Identifier: BSD-3-Clause
* For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
*/
import { RequestInit as NodeRequestInit } from "node-fetch";
/*
* Copyright (c) 2021, salesforce.com, inc.
* All rights reserved.
* SPDX-License-Identifier: BSD-3-Clause
* For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
*/
type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>;
type RequireParametersUnlessAllAreOptional<T extends {
    parameters?: Record<string, unknown>;
}> = Record<string, never> extends NonNullable<T["parameters"]> ? T : T & Required<Pick<T, "parameters">>;
/**
 * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
 * if not specified.
 */
interface BaseUriParameters {
    shortCode: string;
    version?: string; // Optional, will default to "v1" if not provided.
}
/**
 * Generic interface for path parameters.
 */
interface PathParameters {
    [key: string]: string | number | boolean;
}
/**
 * Generic interface for query parameters.
 */
interface QueryParameters {
    [key: string]: string | number | boolean | string[] | number[];
}
type LoginRequest = {
    client_id?: string;
    response_type?: string;
    redirect_uri: string;
    state?: string;
    scope?: string;
    usid?: string;
    channel_id: string;
    code_challenge: string;
} & {
    [key: string]: any;
};
type PasswordLessTokenRequest = {
    grant_type: string;
    hint: string;
    pwdless_token: string;
    usid?: string;
} & {
    [key: string]: any;
};
type CredQualityUserResponse = {
    tenantId: string;
    username: string;
    email: string;
    credQualityMeasure: number;
    pwdStrengthMeasure: number;
    pwdQualityMeasure: number;
    credChangeCount: number;
    loginCount: number;
    lastLoginDatetime: any;
    lastCredCheckDatetime: any;
} & {
    [key: string]: any;
};
type TrustedSystemTokenRequest = {
    usid?: string;
    grant_type: string;
    hint: string;
    login_id: string;
    idp_origin: string;
    client_id: string;
    channel_id: string;
} & {
    [key: string]: any;
};
type TokenResponse = {
    access_token: string;
    id_token: string;
    refresh_token: string;
    expires_in: number;
    token_type: string;
    usid: string;
    customer_id: string;
    enc_user_id: string;
} & {
    [key: string]: any;
};
type TokenRequest = {
    refresh_token?: string;
    code?: string;
    usid?: string;
    grant_type: string;
    redirect_uri?: string;
    code_verifier?: string;
    client_id?: string;
} & {
    [key: string]: any;
};
type PasswordLessAuthRequest = {
    user_id: string;
    mode: string;
    channel_id: string;
} & {
    [key: string]: any;
};
type TokenActionRequest = {
    token: string;
    token_type_hint?: string;
} & {
    [key: string]: any;
};
type BoolFilter = {
    filters?: Array<any>;
    operator: string;
} & {
    [key: string]: any;
};
type MatchAllQuery = {} & {
    [key: string]: any;
};
type FilteredQuery = {
    filter: any;
    query: any;
} & {
    [key: string]: any;
};
type QueryFilter = {
    query: any;
} & {
    [key: string]: any;
};
type TermQuery = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TermFilter = {
    field: string;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type Range2Filter = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
} & {
    [key: string]: any;
};
type BoolQuery = {
    must?: Array<any>;
    mustNot?: Array<any>;
    should?: Array<any>;
} & {
    [key: string]: any;
};
type NestedQuery = {
    path: string;
    query: any;
    scoreMode?: string;
} & {
    [key: string]: any;
};
type Sort = {
    field: string;
    sortOrder?: string;
} & {
    [key: string]: any;
};
type RangeFilter = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
} & {
    [key: string]: any;
};
type L10nString = {} & {
    [key: string]: any;
};
type PropertyValueDefinition = {
    description: L10nString;
    displayValue: L10nString;
    id: string;
    position?: number;
    value: string;
};
/**
 * All path parameters that are used by at least one ShopperLogin method.
 */
type ShopperLoginPathParameters = {
    organizationId?: string;
};
/**
 * All query parameters that are used by at least one ShopperLogin method.
 */
type ShopperLoginQueryParameters = {
    username?: string;
    client_id?: string;
    refresh_token?: string;
    channel_id?: string;
    redirect_uri?: string;
    response_type?: string;
    scope?: string;
    state?: string;
    usid?: string;
    hint?: string;
    code_challenge?: string;
};
/**
 * All parameters that are used by ShopperLogin.
 */
type ShopperLoginParameters = ShopperLoginPathParameters & BaseUriParameters & ShopperLoginQueryParameters;
/**
 * [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary)
 * ==================================
 *
 * *Enable shoppers to log in more easily, stay logged in for longer, and get a more fluid and personalized shopping experience powered by Shopper APIs.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperLogin } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperLoginClient = new ShopperLogin(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.24.0<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
declare class ShopperLogin<ConfigParameters extends ShopperLoginParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/shopper/auth/{version}";
    constructor(config: ClientConfigInit<ConfigParameters>);
    /**
     * Retrieve credential quality statistics for a user.
     *
     * If you would like to get a raw Response object use the other retrieveCredQualityUserInfo function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param username - User's login id or email address.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CredQualityUserResponse.
     *
     */
    retrieveCredQualityUserInfo(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            username: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CredQualityUserResponse>;
    /**
     * Retrieve credential quality statistics for a user.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param username - User's login id or email address.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CredQualityUserResponse otherwise.
     *
     */
    retrieveCredQualityUserInfo<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            username: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CredQualityUserResponse>;
    /**
     * Get authorization code after authenticating a user using an ECOM instance.
     *
     * If you would like to get a raw Response object use the other authenticateCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    authenticateCustomer(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: LoginRequest;
    }>): Promise<void>;
    /**
     * Get authorization code after authenticating a user using an ECOM instance.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    authenticateCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: LoginRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Allows the customer to authenticate when their identity provider is down.
     *
     * If you would like to get a raw Response object use the other authorizePasswordlessCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Object.
     *
     */
    authorizePasswordlessCustomer(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordLessAuthRequest;
    }>): Promise<Object>;
    /**
     * Allows the customer to authenticate when their identity provider is down.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
    authorizePasswordlessCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordLessAuthRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
     * Log a shopper out.
     *
     * If you would like to get a raw Response object use the other logoutCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param client_id - The SLAS client ID.
     * @param refresh_token - Refresh token that was given during the access token request.
     * @param channel_id - The channel_id parameter is a MUST (required) if the shopper authenticated using the /login with ECOM.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    logoutCustomer(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            client_id: string;
            refresh_token: string;
            channel_id?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<TokenResponse>;
    /**
     * Log a shopper out.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param client_id - The SLAS client ID.
     * @param refresh_token - Refresh token that was given during the access token request.
     * @param channel_id - The channel_id parameter is a MUST (required) if the shopper authenticated using the /login with ECOM.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    logoutCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            client_id: string;
            refresh_token: string;
            channel_id?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Get authorization code after authenticating a user against an IDP. This is the first step of the Authorization code grant flow, where a user is able to log in via federation to the IDP configured for the client, and gets an authorization code after successful login via a callback/redirect URI. Mandatory fields are the shopping app's clientId, redirectURI, responseType and authType. This API can be called from the front channel (from the browser).
     *
     * If you would like to get a raw Response object use the other authorizeCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered.
     * @param response_type - Must be 'code'. 'code' indicates that the client wants an authorization code (authorization code grant flow).
     * @param client_id - The client ID obtained during application registration.
     * @param scope - (Not Supported)
     * @param state - Value to be sent by the client to determine the state between the authorization request and the server response.  Optional but strongly recommended.
     * @param usid - ID that uniquely identifies the shopper much like a UUID. This is an optional field, a new USID will be generated if this field is empty.
     * @param hint - IDP name that can be optionally added to redirect directly to skipping the IDP selection step.<br/><br/>To use a public client the hint should be set to <b>guest</b> and a public client id should be used to get an authorization code.
     * @param channel_id - The channel this request is for. For an ECOM request this is angalous to the site ID.
     * @param code_challenge - Created by the client calling the login endpoint.<br><br>The code_challenge is created by SHA256 hashing the code_verifier and base64 URL encoding the resulting hash Base64UrlEncode(SHA256Hash(code_verifier).<br><br>The code verifier should be a high-entropy cryptographic random string with a minimum of 43 characters and a maximum of 128 characters.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    authorizeCustomer(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            redirect_uri: string;
            response_type: string;
            client_id: string;
            scope?: string;
            state?: string;
            usid?: string;
            hint?: string;
            channel_id?: string;
            code_challenge: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Get authorization code after authenticating a user against an IDP. This is the first step of the Authorization code grant flow, where a user is able to log in via federation to the IDP configured for the client, and gets an authorization code after successful login via a callback/redirect URI. Mandatory fields are the shopping app's clientId, redirectURI, responseType and authType. This API can be called from the front channel (from the browser).
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered.
     * @param response_type - Must be 'code'. 'code' indicates that the client wants an authorization code (authorization code grant flow).
     * @param client_id - The client ID obtained during application registration.
     * @param scope - (Not Supported)
     * @param state - Value to be sent by the client to determine the state between the authorization request and the server response.  Optional but strongly recommended.
     * @param usid - ID that uniquely identifies the shopper much like a UUID. This is an optional field, a new USID will be generated if this field is empty.
     * @param hint - IDP name that can be optionally added to redirect directly to skipping the IDP selection step.<br/><br/>To use a public client the hint should be set to <b>guest</b> and a public client id should be used to get an authorization code.
     * @param channel_id - The channel this request is for. For an ECOM request this is angalous to the site ID.
     * @param code_challenge - Created by the client calling the login endpoint.<br><br>The code_challenge is created by SHA256 hashing the code_verifier and base64 URL encoding the resulting hash Base64UrlEncode(SHA256Hash(code_verifier).<br><br>The code verifier should be a high-entropy cryptographic random string with a minimum of 43 characters and a maximum of 128 characters.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    authorizeCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            redirect_uri: string;
            response_type: string;
            client_id: string;
            scope?: string;
            state?: string;
            usid?: string;
            hint?: string;
            channel_id?: string;
            code_challenge: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Get the shopper or guest JWT/access token, along with a refresh token. This is the second step of the OAuth2 Authorization code flow where a client app is able to get an access token for the shopper through the backchannel (a trusted server side) by passing in the client credentials and the authorization code retrieved from authorize endpoint. Mandatory fields when using the token endpoint to get the access token are clientId, clientSecret, authorizationCode, grantType of authorization_code. \<br/\>\<br/\> As a guest user get the shopper JWT / access token along with a refresh token. This is where a client app is able to get an access token for the guest user through the back-channel (a trusted server side) by passing in the client credentials. Mandatory fields when asking for the guest token endpoint to get the access token are clientId, clientSecret, grantType of client_credentials.\<br/\>\<br/\>When refreshing the access token with a private client id and secret the refresh token will NOT be re-generated, but when refreshing the access token with a public client id the refresh token will aways be re-generated (i.e, old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token).\<br/\>\<br/\>Mandatory fields when using the token endpoint with a private client id to refresh an access token are grant_type, or refresh_token.\<br/\>\<br/\>Mandatory fields when using the token endpoint with a public client id to refresh an access token are grant_type and refresh_token with the client_id as a query parameter.\<br/\>\<br/\>Valid grant types for the token endpoint are REFRESH_TOKEN, CLIENT_CREDENTIALS, AUTHORIZATION_CODE_PKCE.
     *
     * If you would like to get a raw Response object use the other getAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    getAccessToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenRequest;
    }>): Promise<TokenResponse>;
    /**
     * Get the shopper or guest JWT/access token, along with a refresh token. This is the second step of the OAuth2 Authorization code flow where a client app is able to get an access token for the shopper through the backchannel (a trusted server side) by passing in the client credentials and the authorization code retrieved from authorize endpoint. Mandatory fields when using the token endpoint to get the access token are clientId, clientSecret, authorizationCode, grantType of authorization_code. \<br/\>\<br/\> As a guest user get the shopper JWT / access token along with a refresh token. This is where a client app is able to get an access token for the guest user through the back-channel (a trusted server side) by passing in the client credentials. Mandatory fields when asking for the guest token endpoint to get the access token are clientId, clientSecret, grantType of client_credentials.\<br/\>\<br/\>When refreshing the access token with a private client id and secret the refresh token will NOT be re-generated, but when refreshing the access token with a public client id the refresh token will aways be re-generated (i.e, old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token).\<br/\>\<br/\>Mandatory fields when using the token endpoint with a private client id to refresh an access token are grant_type, or refresh_token.\<br/\>\<br/\>Mandatory fields when using the token endpoint with a public client id to refresh an access token are grant_type and refresh_token with the client_id as a query parameter.\<br/\>\<br/\>Valid grant types for the token endpoint are REFRESH_TOKEN, CLIENT_CREDENTIALS, AUTHORIZATION_CODE_PKCE.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    getAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Get a shopper JWT/access token for registered customers whose credentials are stored using a third party system.\</br\>\</br\>Mandatory fields for \<b\>Trusted On Behalf Of\</b\> to get an access token are grant_type, hint, login_id, login_origin, and channel_id.\</br\>\</br\>Valid grant type for \<b\>Trusted On Behalf Of\</b\> is \<i\>client_credentials.\</i\>\</br\>\</br\>For\<b\>Trusted System External On Behalf Of\</b\> a basic auth authorization header of SLAS client id and SLAS client secret should be used in place of the bearer Token.\</br\>\</br\>For \<b\>Trusted System Internal On Behalf Of \</b\>the authorization header bearer token should be a C2C JWT.\</br\>
     *
     * If you would like to get a raw Response object use the other getTrustedSystemAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    getTrustedSystemAccessToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TrustedSystemTokenRequest;
    }>): Promise<TokenResponse>;
    /**
     * Get a shopper JWT/access token for registered customers whose credentials are stored using a third party system.\</br\>\</br\>Mandatory fields for \<b\>Trusted On Behalf Of\</b\> to get an access token are grant_type, hint, login_id, login_origin, and channel_id.\</br\>\</br\>Valid grant type for \<b\>Trusted On Behalf Of\</b\> is \<i\>client_credentials.\</i\>\</br\>\</br\>For\<b\>Trusted System External On Behalf Of\</b\> a basic auth authorization header of SLAS client id and SLAS client secret should be used in place of the bearer Token.\</br\>\</br\>For \<b\>Trusted System Internal On Behalf Of \</b\>the authorization header bearer token should be a C2C JWT.\</br\>
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    getTrustedSystemAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TrustedSystemTokenRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Issue a shopper token (JWT).
     *
     * If you would like to get a raw Response object use the other getPasswordLessAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    getPasswordLessAccessToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordLessTokenRequest;
    }>): Promise<TokenResponse>;
    /**
     * Issue a shopper token (JWT).
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    getPasswordLessAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordLessTokenRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Invalidate the refresh token. A basic auth header with base64 encoded clientId:secret is required in the Authorization header, and the refresh token to be revoked is required in the body.
     *
     * If you would like to get a raw Response object use the other revokeToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
    revokeToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenActionRequest;
    }>): Promise<TokenResponse>;
    /**
     * Invalidate the refresh token. A basic auth header with base64 encoded clientId:secret is required in the Authorization header, and the refresh token to be revoked is required in the body.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
    revokeToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenActionRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
    /**
     * Returns the token properties. A basic auth header with base64 encoded clientId:secret is required in the Authorization header, as well as an access token or refresh token. Use token_type_hint to help identify the token.
     *
     * If you would like to get a raw Response object use the other introspectToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Object.
     *
     */
    introspectToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenActionRequest;
    }>): Promise<Object>;
    /**
     * Returns the token properties. A basic auth header with base64 encoded clientId:secret is required in the Authorization header, as well as an access token or refresh token. Use token_type_hint to help identify the token.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
    introspectToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TokenActionRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
     * Returns a JSON document with claims about the currently authenticated end user.
     *
     * If you would like to get a raw Response object use the other getUserInfo function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer this is angalous to the site ID. This is a required parameter when getting user information for an ECOM customer.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Object.
     *
     */
    getUserInfo(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channel_id?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Object>;
    /**
     * Returns a JSON document with claims about the currently authenticated end user.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer this is angalous to the site ID. This is a required parameter when getting user information for an ECOM customer.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
    getUserInfo<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channel_id?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
     * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
     *
     * If you would like to get a raw Response object use the other getWellknownOpenidConfiguration function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Object.
     *
     */
    getWellknownOpenidConfiguration(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Object>;
    /**
     * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
    getWellknownOpenidConfiguration<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
    /**
     * Returns a JWKS containing public keys that enable clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
     *
     * If you would like to get a raw Response object use the other getJwksUri function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Object.
     *
     */
    getJwksUri(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Object>;
    /**
     * Returns a JWKS containing public keys that enable clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
    getJwksUri<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
}
/**
 * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
 * it from the `RequestInit` provided by node-fetch.
 */
type BrowserRequestInit = RequestInit;
/**
 * Any properties supported in either the browser or node are accepted.
 * Using the right properties in the right context is left to the user.
 */
type FetchOptions = NodeRequestInit & BrowserRequestInit;
/**
 * Base options that can be passed to the `ClientConfig` class.
 */
interface ClientConfigInit<Params extends BaseUriParameters> {
    baseUri?: string;
    proxy?: string;
    headers?: {
        [key: string]: string;
    };
    parameters: Params;
    fetchOptions?: FetchOptions;
    transformRequest?: (data: unknown, headers: {
        [key: string]: string;
    }) => Required<FetchOptions>["body"];
    throwOnBadResponse?: boolean;
}
/**
 * Configuration parameters common to Commerce SDK clients
 */
declare class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
    baseUri?: string;
    proxy?: string;
    headers: {
        [key: string]: string;
    };
    parameters: Params;
    fetchOptions: FetchOptions;
    transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
    throwOnBadResponse: boolean;
    constructor(config: ClientConfigInit<Params>);
    static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
}
type TaxItems = {
    taxItems?: Array<TaxItem>;
} & {
    [key: string]: any;
};
type PaymentCardSpec = {
    cardType?: string;
    checksumVerificationEnabled?: boolean;
    description?: string;
    image?: string;
    name?: string;
    numberLengths?: Array<string>;
    numberPrefixes?: Array<string>;
} & {
    [key: string]: any;
};
type OrderAddress = {
    address1?: string;
    address2?: string;
    city?: string;
    companyName?: string;
    countryCode?: string;
    firstName?: string;
    fullName?: string;
    id?: string;
    jobTitle?: string;
    lastName?: string;
    phone?: string;
    postBox?: string;
    postalCode?: string;
    salutation?: string;
    secondName?: string;
    stateCode?: string;
    suffix?: string;
    suite?: string;
    title?: string;
} & {
    [key: string]: any;
};
type PaymentCard = {
    cardType?: string;
    creditCardExpired?: boolean;
    creditCardToken?: string;
    expirationMonth?: number;
    expirationYear?: number;
    holder?: string;
    issueNumber?: string;
    maskedNumber?: string;
    numberLastDigits?: string;
    validFromMonth?: number;
    validFromYear?: number;
};
type ShippingItem = {
    adjustedTax?: number;
    basePrice?: number;
    itemId?: string;
    itemText?: string;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment>;
    priceAfterItemDiscount?: number;
    shipmentId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type Discount = {
    amount?: number;
    percentage?: number;
    priceBookId?: string;
    type: string;
} & {
    [key: string]: any;
};
type CouponItem = {
    code: string;
    couponItemId?: string;
    statusCode?: string;
    valid?: boolean;
} & {
    [key: string]: any;
};
type PriceBookIds = Array<string>;
type ShippingPromotion = {
    calloutMsg?: string;
    promotionId?: string;
    promotionName?: string;
} & {
    [key: string]: any;
};
type ProductItem = {
    adjustedTax?: number;
    basePrice?: number;
    bonusDiscountLineItemId?: string;
    bonusProductLineItem?: boolean;
    bundledProductItems?: Array<ProductItem>;
    gift?: boolean;
    giftMessage?: string;
    inventoryId?: string;
    itemId?: string;
    itemText?: string;
    optionItems?: Array<OptionItem>;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment>;
    priceAfterItemDiscount?: number;
    priceAfterOrderDiscount?: number;
    productId?: string;
    productListItem?: ProductListItemReference;
    productName?: string;
    quantity?: number;
    shipmentId?: string;
    shippingItemId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type BasketPaymentInstrumentRequest = {
    amount?: number;
    bankRoutingNumber?: string;
    giftCertificateCode?: string;
    paymentCard?: OrderPaymentCardRequest;
    paymentMethodId?: string;
} & {
    [key: string]: any;
};
type Taxes = {
    taxes: {} & {
        [key: string]: any;
    };
};
type OrderPaymentInstrument = {
    amount?: number;
    authorizationStatus?: Status;
    bankRoutingNumber?: string;
    maskedGiftCertificateCode?: string;
    paymentCard?: PaymentCard;
    paymentInstrumentId?: string;
    paymentMethodId?: string;
} & {
    [key: string]: any;
};
type BonusDiscountLineItem = {
    bonusProducts?: Array<ProductDetailsLink>;
    couponCode?: string;
    id?: string;
    maxBonusItems?: number;
    promotionId?: string;
} & {
    [key: string]: any;
};
type PaymentMethodResult = {
    applicablePaymentMethods?: Array<PaymentMethod>;
} & {
    [key: string]: any;
};
type Shipment = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    gift?: boolean;
    giftMessage?: string;
    merchandizeTotalTax?: number;
    productSubTotal?: number;
    productTotal?: number;
    shipmentId?: string;
    shipmentNo?: string;
    shipmentTotal?: number;
    shippingAddress?: OrderAddress;
    shippingMethod?: ShippingMethod;
    shippingStatus?: string;
    shippingTotal?: number;
    shippingTotalTax?: number;
    taxTotal?: number;
    trackingNumber?: string;
} & {
    [key: string]: any;
};
type CustomerInfo = {
    customerId?: string;
    customerName?: string;
    customerNo?: string;
    email: string;
} & {
    [key: string]: any;
};
type SimpleLink = {};
type PriceAdjustment = {
    appliedDiscount?: Discount;
    couponCode?: string;
    createdBy?: string;
    creationDate?: any;
    custom?: boolean;
    itemText?: string;
    lastModified?: any;
    manual?: boolean;
    price?: number;
    priceAdjustmentId?: string;
    promotionId?: string;
    promotionLink?: string;
    reasonCode?: string;
} & {
    [key: string]: any;
};
type ShippingMethodResult = {
    applicableShippingMethods?: Array<ShippingMethod>;
    defaultShippingMethodId?: string;
} & {
    [key: string]: any;
};
type ProductDetailsLink = {
    productDescription?: string;
    productId: string;
    productName?: string;
    title?: string;
};
type OptionItem = {
    adjustedTax?: number;
    basePrice?: number;
    bonusDiscountLineItemId?: string;
    bonusProductLineItem?: boolean;
    bundledProductItems?: Array<ProductItem>;
    gift?: boolean;
    giftMessage?: string;
    inventoryId?: string;
    itemId?: string;
    itemText?: string;
    optionId: string;
    optionItems?: Array<OptionItem>;
    optionValueId: string;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment>;
    priceAfterItemDiscount?: number;
    priceAfterOrderDiscount?: number;
    productId?: string;
    productListItem?: ProductListItemReference;
    productName?: string;
    quantity?: number;
    shipmentId?: string;
    shippingItemId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type ShippingMethod = {
    description?: string;
    externalShippingMethod?: string;
    id: string;
    name?: string;
    price?: number;
    shippingPromotions?: Array<ShippingPromotion>;
} & {
    [key: string]: any;
};
type Basket = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    agentBasket?: boolean;
    basketId?: string;
    billingAddress?: OrderAddress;
    bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
    channelType?: string;
    couponItems?: Array<CouponItem>;
    creationDate?: any;
    currency?: string;
    customerInfo?: CustomerInfo;
    giftCertificateItems?: Array<GiftCertificateItem>;
    inventoryReservationExpiry?: any;
    lastModified?: any;
    merchandizeTotalTax?: number;
    notes?: SimpleLink;
    orderPriceAdjustments?: Array<PriceAdjustment>;
    orderTotal?: number;
    paymentInstruments?: Array<OrderPaymentInstrument>;
    productItems?: Array<ProductItem>;
    productSubTotal?: number;
    productTotal?: number;
    shipments?: Array<Shipment>;
    shippingItems?: Array<ShippingItem>;
    shippingTotal?: number;
    shippingTotalTax?: number;
    sourceCode?: string;
    taxTotal?: number;
    taxation?: string;
} & {
    [key: string]: any;
};
type GiftCertificateItem = {
    amount: number;
    giftCertificateItemId?: string;
    message?: string;
    recipientEmail: string;
    recipientName?: string;
    senderName?: string;
    shipmentId?: string;
} & {
    [key: string]: any;
};
type ProductListLink = {
    description?: string;
    name?: string;
    public?: boolean;
    title?: string;
    type?: string;
} & {
    [key: string]: any;
};
type Order = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    billingAddress?: OrderAddress;
    bonusDiscountLineItems?: Array<BonusDiscountLineItem>;
    channelType?: string;
    confirmationStatus?: string;
    couponItems?: Array<CouponItem>;
    createdBy?: string;
    creationDate?: any;
    currency?: string;
    customerInfo?: CustomerInfo;
    customerName?: string;
    exportStatus?: string;
    externalOrderStatus?: string;
    giftCertificateItems?: Array<GiftCertificateItem>;
    globalPartyId?: string;
    lastModified?: any;
    merchandizeTotalTax?: number;
    notes?: SimpleLink;
    orderNo?: string;
    orderPriceAdjustments?: Array<PriceAdjustment>;
    orderToken?: string;
    orderTotal?: number;
    paymentInstruments?: Array<OrderPaymentInstrument>;
    paymentStatus?: string;
    productItems?: Array<ProductItem>;
    productSubTotal?: number;
    productTotal?: number;
    shipments?: Array<Shipment>;
    shippingItems?: Array<ShippingItem>;
    shippingStatus?: string;
    shippingTotal?: number;
    shippingTotalTax?: number;
    siteId?: string;
    sourceCode?: string;
    status?: string;
    taxTotal?: number;
    taxation?: string;
} & {
    [key: string]: any;
};
type OrderPaymentCardRequest = {
    cardType?: string;
    creditCardToken?: string;
    expirationMonth?: number;
    expirationYear?: number;
    holder?: string;
    issueNumber?: string;
    maskedNumber?: string;
    validFromMonth?: number;
    validFromYear?: number;
};
type PaymentMethod = {
    cards?: Array<PaymentCardSpec>;
    description?: string;
    id: string;
    image?: string;
    name?: string;
    paymentProcessorId?: string;
} & {
    [key: string]: any;
};
type TaxItem = {
    id: string;
    rate: number;
    value?: number;
};
type Status = {
    code?: string;
    message?: string;
    status?: number;
};
type ProductListItemReference = {
    id: string;
    priority?: number;
    productDetailsLink?: ProductDetailsLink;
    productList?: ProductListLink;
    public?: boolean;
    purchasedQuantity?: number;
    quantity?: number;
    type?: string;
};
/**
 * All path parameters that are used by at least one ShopperBaskets method.
 */
type ShopperBasketsPathParameters = {
    organizationId?: string;
    basketId?: string;
    couponItemId?: string;
    giftCertificateItemId?: string;
    itemId?: string;
    paymentInstrumentId?: string;
    shipmentId?: string;
};
/**
 * All query parameters that are used by at least one ShopperBaskets method.
 */
type ShopperBasketsQueryParameters = {
    taxMode?: string;
    siteId?: string;
    locale?: string;
    overrideExisting?: boolean;
    createDestinationBasket?: boolean;
    productItemMergeMode?: string;
    useAsShipping?: boolean;
    removeExternalTax?: boolean;
    useAsBilling?: boolean;
};
/**
 * All parameters that are used by ShopperBaskets.
 */
type ShopperBasketsParameters = ShopperBasketsPathParameters & BaseUriParameters & ShopperBasketsQueryParameters;
/**
 * [Shopper Baskets](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-baskets:Summary)
 * ==================================
 *
 * *Build a checkout experience.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperBaskets } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperBasketsClient = new ShopperBaskets(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 0.6.3<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
declare class ShopperBaskets<ConfigParameters extends ShopperBasketsParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-baskets/{version}";
    constructor(config: ClientConfigInit<ConfigParameters>);
    /**
     * Creates a new basket.
     
     The created basket is initialized with default values. Data provided in the body document is populated into the created basket. It can be updated with API endpoints listed below.
     
     The taxMode query parameter can be used to choose the basket tax mode. The default is internal, in which case the tax calculation is done automatically based on internal tax tables. Alternatively, external taxation mode can be set which allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate per default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited (depending on the type, the tax rate is either obtained from the related line item or computed as prorate of the basket).
     
     API endpoints allowing further basket modification:
     
     - customer information: PUT /baskets/\{basketId\}/customer
     
     - billing address: PUT /baskets/\{basketId\}/billing-address
     
     - shipments including shipping address and shipping method: POST /baskets/\{basketId\}/shipments
     
     - product items: POST /baskets/\{basketId\}/items
     
     - coupon items: POST /baskets/\{basketId\}/coupons
     
     - gift certificate items: POST /baskets/\{basketId\}/gift-certificates
     
     - basket taxation: PUT /baskets/\{basketId\}/taxes
     
     - basket item taxation: PUT /baskets/\{basketId\}/items/\{itemId\}/taxes
     
     - payment method and card type: POST /baskets/\{basketId\}/payment-instruments
     
     - custom properties: PATCH /baskets/\{basketId\}
     
     Related resource means with which resource you can specify the same data after the basket creation.
     Identify the basket using the basketId property, which
     should be integrated into the path of an update request (for example a POST to
     /baskets/\{basketId\}/items).
     
     A customer must provide a JSON Web Token (JWT), which specifies exactly one customer (it can be a guest or a registered
     customer). In this case, the resource creates a basket for this customer.
     
     The number of baskets which can be created per customer is limited. When a
     basket is created, it is said to be open. It remains open until either an order is created from it
     using a POST to resource /orders, or it is deleted using a DELETE to resource
     /baskets/\{basketId\}. Each customer can have just one open basket.
     
     Custom properties in the form c_\<CUSTOM_NAME\> are supported. A custom property must correspond to a custom
     attribute (\<CUSTOM_NAME\>) defined for the basket system object, and its value must be valid for that custom
     attribute.
     *
     * If you would like to get a raw Response object use the other createBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param taxMode -
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    createBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            taxMode?: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket;
    }>): Promise<Basket>;
    /**
     * Creates a new basket.
     
     The created basket is initialized with default values. Data provided in the body document is populated into the created basket. It can be updated with API endpoints listed below.
     
     The taxMode query parameter can be used to choose the basket tax mode. The default is internal, in which case the tax calculation is done automatically based on internal tax tables. Alternatively, external taxation mode can be set which allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate per default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited (depending on the type, the tax rate is either obtained from the related line item or computed as prorate of the basket).
     
     API endpoints allowing further basket modification:
     
     - customer information: PUT /baskets/\{basketId\}/customer
     
     - billing address: PUT /baskets/\{basketId\}/billing-address
     
     - shipments including shipping address and shipping method: POST /baskets/\{basketId\}/shipments
     
     - product items: POST /baskets/\{basketId\}/items
     
     - coupon items: POST /baskets/\{basketId\}/coupons
     
     - gift certificate items: POST /baskets/\{basketId\}/gift-certificates
     
     - basket taxation: PUT /baskets/\{basketId\}/taxes
     
     - basket item taxation: PUT /baskets/\{basketId\}/items/\{itemId\}/taxes
     
     - payment method and card type: POST /baskets/\{basketId\}/payment-instruments
     
     - custom properties: PATCH /baskets/\{basketId\}
     
     Related resource means with which resource you can specify the same data after the basket creation.
     Identify the basket using the basketId property, which
     should be integrated into the path of an update request (for example a POST to
     /baskets/\{basketId\}/items).
     
     A customer must provide a JSON Web Token (JWT), which specifies exactly one customer (it can be a guest or a registered
     customer). In this case, the resource creates a basket for this customer.
     
     The number of baskets which can be created per customer is limited. When a
     basket is created, it is said to be open. It remains open until either an order is created from it
     using a POST to resource /orders, or it is deleted using a DELETE to resource
     /baskets/\{basketId\}. Each customer can have just one open basket.
     
     Custom properties in the form c_\<CUSTOM_NAME\> are supported. A custom property must correspond to a custom
     attribute (\<CUSTOM_NAME\>) defined for the basket system object, and its value must be valid for that custom
     attribute.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param taxMode -
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    createBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            taxMode?: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Transfer the previous shopper's basket to the current shopper by updating the basket's owner. No other values change. You must obtain the shopper authorization token via SLAS, and it must contain both the previous and current shopper IDs.
     
     A success response contains the transferred basket.
     
     If the current shopper has an active basket, and the `overwriteExisting` request parameter is `false`, then the transfer request returns a BasketTransferException (HTTP status 409). You can proceed with one of these options:
     - Keep the current shopper's active basket.
     - Merge the previous and current shoppers' baskets by calling the `baskets/merge` endpoint.
     - Force the transfer by calling the `baskets/transfer` endpoint again, with the parameter `overwriteExisting=true`. Forcing the transfer deletes the current shopper's active basket.
     *
     * If you would like to get a raw Response object use the other transferBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param overrideExisting - If the current shopper has no active basket, this parameter is ignored. If the current shopper has an active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketTransferException (HTTP status 409). The basket owner doesn't change.
     - `true`: Force the transfer by deleting the current shopper's active basket and making the current shopper the owner of the previous shopper's basket. Returns the transferred basket (HTTP status 200).
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    transferBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            overrideExisting?: boolean;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Transfer the previous shopper's basket to the current shopper by updating the basket's owner. No other values change. You must obtain the shopper authorization token via SLAS, and it must contain both the previous and current shopper IDs.
     
     A success response contains the transferred basket.
     
     If the current shopper has an active basket, and the `overwriteExisting` request parameter is `false`, then the transfer request returns a BasketTransferException (HTTP status 409). You can proceed with one of these options:
     - Keep the current shopper's active basket.
     - Merge the previous and current shoppers' baskets by calling the `baskets/merge` endpoint.
     - Force the transfer by calling the `baskets/transfer` endpoint again, with the parameter `overwriteExisting=true`. Forcing the transfer deletes the current shopper's active basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param overrideExisting - If the current shopper has no active basket, this parameter is ignored. If the current shopper has an active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketTransferException (HTTP status 409). The basket owner doesn't change.
     - `true`: Force the transfer by deleting the current shopper's active basket and making the current shopper the owner of the previous shopper's basket. Returns the transferred basket (HTTP status 200).
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    transferBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            overrideExisting?: boolean;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Merge data from the previous shopper's basket into the current shopper's active basket and delete the previous shopper's basket. This endpoint doesn't merge Personally Identifiable Information (PII). You must obtain the shopper authorization token via SLAS, and it must contain both the previous and current shopper IDs. After the merge, all basket amounts are recalculated and totaled, including lookups for prices, taxes, shipping, and promotions.
     
     The following information is merged:
     - custom attributes on the basket and on all copied records
     - product items
     - gift certificate items
     - coupon items
     - shipments
     - ad-hoc price adjustments
     
     To control the merging of products that exist in both baskets, use the `productItemMergeMode` parameter. By default, the higher of the two basket quantities is used for each product. Products in both baskets are considered to be the same when all of the following values match (if one product doesn't have a value, the other product is a match only if it also doesn't have that value):
     - shipment
     - productId
     - option values
     - wishlist reference
     - inventory list id
     - gift flag & message
     - ad-hoc price adjustments
     
     If any of the listed values don't match, then the item in the previous shopper's basket is copied to a new line item in the current shopper's basket. If the listed values all match, but the matching products have different values for any custom attribute, the merged line item keeps the custom attribute value from the current shopper's basket.
     
     A success response contains the current shopper's active basket. The previous guest shopper's active basket is deleted.
     
     If the current shopper doesn't have an active basket, and the createDestinationBasket request parameter is false, then the merge request returns a BasketMergeException (HTTP status 409). You can proceed with one of these options:
     - Transfer the previous shopper's active basket to the current logged-in shopper by calling the `baskets/transfer` endpoint.
     - Force the merge by calling the `baskets/merge` endpoint again, with the parameter `createDestinationBasket=true`. Forcing the merge creates a new basket for the current shopper and copies information from the previous shopper's basket into it. Because the merge doesn't copy all basket data, a forced merge is not the same as a transfer. For example, the new basket doesn't contain any Personally Identifiable Information (PII) from the previous basket.
     
     ### before merge
     | Previous Shopper's Basket, SKU: Quantity, Custom Attributes | Current Shopper's Basket, SKU: Quantity, Custom Attributes  |
     |-------------------------------------------------------------|-------------------------------------------------------------|
     | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> c_customAttr_1: 'ABC' \<br\> c_customAttr_2: 'DEF'   | SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_3: 'XYZ'   |
     
     ### after merge - (previous shopper's basket is deleted)
     | productItemMergeMode | Current Shopper's Basket - SKU: Quantity, Custom Attributes  |
     |----------------------|--------------------------------------------------------------|
     | sum_quantities         | SKU_A: 7\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | higher_quantity      | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | saved_quantity       | SKU_A: 2\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | separate_item        | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ' |
     *
     * If you would like to get a raw Response object use the other mergeBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param createDestinationBasket - If the current shopper has an active basket, this parameter is ignored. If the current shopper has no active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketMergeException (HTTP status 409).
     - `true`: Force the merge by creating a basket for the current shopper and copying information from the previous shopper's basket into it. Return success (HTTP status 200).
     * @param productItemMergeMode - This parameter controls the quantity calculation for products that exist in both baskets.
     - higher_quantity (default): Compare the product's quantities in each basket, and use the higher value.
     - sum_quantities: Use the sum of the product's quantities from both baskets.
     - saved_quantity: Use the product's quantity in the current shopper's active basket. Ignore the quantity from the previous shopper's basket.
     - separate_item: Add a separate product item to the current shopper's basket for the quantity in the previous shopper's basket.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    mergeBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            createDestinationBasket?: boolean;
            productItemMergeMode?: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Merge data from the previous shopper's basket into the current shopper's active basket and delete the previous shopper's basket. This endpoint doesn't merge Personally Identifiable Information (PII). You must obtain the shopper authorization token via SLAS, and it must contain both the previous and current shopper IDs. After the merge, all basket amounts are recalculated and totaled, including lookups for prices, taxes, shipping, and promotions.
     
     The following information is merged:
     - custom attributes on the basket and on all copied records
     - product items
     - gift certificate items
     - coupon items
     - shipments
     - ad-hoc price adjustments
     
     To control the merging of products that exist in both baskets, use the `productItemMergeMode` parameter. By default, the higher of the two basket quantities is used for each product. Products in both baskets are considered to be the same when all of the following values match (if one product doesn't have a value, the other product is a match only if it also doesn't have that value):
     - shipment
     - productId
     - option values
     - wishlist reference
     - inventory list id
     - gift flag & message
     - ad-hoc price adjustments
     
     If any of the listed values don't match, then the item in the previous shopper's basket is copied to a new line item in the current shopper's basket. If the listed values all match, but the matching products have different values for any custom attribute, the merged line item keeps the custom attribute value from the current shopper's basket.
     
     A success response contains the current shopper's active basket. The previous guest shopper's active basket is deleted.
     
     If the current shopper doesn't have an active basket, and the createDestinationBasket request parameter is false, then the merge request returns a BasketMergeException (HTTP status 409). You can proceed with one of these options:
     - Transfer the previous shopper's active basket to the current logged-in shopper by calling the `baskets/transfer` endpoint.
     - Force the merge by calling the `baskets/merge` endpoint again, with the parameter `createDestinationBasket=true`. Forcing the merge creates a new basket for the current shopper and copies information from the previous shopper's basket into it. Because the merge doesn't copy all basket data, a forced merge is not the same as a transfer. For example, the new basket doesn't contain any Personally Identifiable Information (PII) from the previous basket.
     
     ### before merge
     | Previous Shopper's Basket, SKU: Quantity, Custom Attributes | Current Shopper's Basket, SKU: Quantity, Custom Attributes  |
     |-------------------------------------------------------------|-------------------------------------------------------------|
     | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> c_customAttr_1: 'ABC' \<br\> c_customAttr_2: 'DEF'   | SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_3: 'XYZ'   |
     
     ### after merge - (previous shopper's basket is deleted)
     | productItemMergeMode | Current Shopper's Basket - SKU: Quantity, Custom Attributes  |
     |----------------------|--------------------------------------------------------------|
     | sum_quantities         | SKU_A: 7\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | higher_quantity      | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | saved_quantity       | SKU_A: 2\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | separate_item        | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ' |
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param createDestinationBasket - If the current shopper has an active basket, this parameter is ignored. If the current shopper has no active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketMergeException (HTTP status 409).
     - `true`: Force the merge by creating a basket for the current shopper and copying information from the previous shopper's basket into it. Return success (HTTP status 200).
     * @param productItemMergeMode - This parameter controls the quantity calculation for products that exist in both baskets.
     - higher_quantity (default): Compare the product's quantities in each basket, and use the higher value.
     - sum_quantities: Use the sum of the product's quantities from both baskets.
     - saved_quantity: Use the product's quantity in the current shopper's active basket. Ignore the quantity from the previous shopper's basket.
     - separate_item: Add a separate product item to the current shopper's basket for the quantity in the previous shopper's basket.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    mergeBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            createDestinationBasket?: boolean;
            productItemMergeMode?: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Removes a basket.
     *
     * If you would like to get a raw Response object use the other deleteBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    deleteBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Removes a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    deleteBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Gets a basket.
     *
     * If you would like to get a raw Response object use the other getBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    getBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Gets a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    getBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates a basket. Only the currency of the basket, source code, the custom
     properties of the basket, and the shipping items will be considered.
     *
     * If you would like to get a raw Response object use the other updateBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket;
    }>): Promise<Basket>;
    /**
     * Updates a basket. Only the currency of the basket, source code, the custom
     properties of the basket, and the shipping items will be considered.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Sets the billing address of a basket.
     *
     * If you would like to get a raw Response object use the other updateBillingAddressForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param useAsShipping -
     * @param removeExternalTax - Changing the billing/shipping address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the billing/shipping address change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateBillingAddressForBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            useAsShipping?: boolean;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderAddress;
    }>): Promise<Basket>;
    /**
     * Sets the billing address of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param useAsShipping -
     * @param removeExternalTax - Changing the billing/shipping address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the billing/shipping address change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateBillingAddressForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            useAsShipping?: boolean;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderAddress;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Adds a coupon to an existing basket.
     *
     * If you would like to get a raw Response object use the other addCouponToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    addCouponToBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CouponItem;
    }>): Promise<Basket>;
    /**
     * Adds a coupon to an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    addCouponToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CouponItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Removes a coupon from the basket.
     *
     * If you would like to get a raw Response object use the other removeCouponFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param couponItemId - The ID of the coupon item to be removed.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    removeCouponFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            couponItemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Removes a coupon from the basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param couponItemId - The ID of the coupon item to be removed.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    removeCouponFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            couponItemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Sets customer information for an existing basket.
     *
     * If you would like to get a raw Response object use the other updateCustomerForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateCustomerForBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerInfo;
    }>): Promise<Basket>;
    /**
     * Sets customer information for an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateCustomerForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerInfo;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Adds a gift certificate item to an existing basket.
     *
     * If you would like to get a raw Response object use the other addGiftCertificateItemToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    addGiftCertificateItemToBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateItem;
    }>): Promise<Basket>;
    /**
     * Adds a gift certificate item to an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    addGiftCertificateItemToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Deletes a gift certificate item from an existing basket.
     *
     * If you would like to get a raw Response object use the other removeGiftCertificateItemFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    removeGiftCertificateItemFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            giftCertificateItemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Deletes a gift certificate item from an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    removeGiftCertificateItemFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            giftCertificateItemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates a gift certificate item of an existing basket.
     *
     * If you would like to get a raw Response object use the other updateGiftCertificateItemInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateGiftCertificateItemInBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            giftCertificateItemId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateItem;
    }>): Promise<Basket>;
    /**
     * Updates a gift certificate item of an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateGiftCertificateItemInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            giftCertificateItemId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Adds new items to a basket. The added items are associated with the
     specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
     Considered values from the request body, for each item are:
     
     - productId: a valid product ID. This is the ID of the product to be added to the basket. If the
     product is already in the basket, the API either increments the quantity of the existing product line item or
     creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
     product bundles containing variation masters, the API creates a new product line item regardless of the site
     preference.
     - shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item
     is created.
     - quantity: a number between 0.01 and 999. This is the quantity of the product to order.
     - inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is
     allocated.
     - bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the
     bonus discount line item for which the added product is a selected bonus product.
     - optionItems/optionValueId: a valid option value ID. This is an option value for an option item of
     an option product.  This is only possible if the product item is an option
     product. To set option values, you must specify a collection of option items in the optionItems
     property. These option items must contain optionId and optionValueId. Also,
     the values you specify must be valid for the option product that this product item represents. Otherwise, the
     server throws an InvalidProductOptionItemException or an
     InvalidProductOptionValueItemException.
     - custom properties in the form c_\<CUSTOM_NAME\>: the custom property must correspond to a custom
     attribute (\<CUSTOM_NAME\>) defined for ProductLineItem. The value of this property must be valid for the
     type of custom attribute defined for ProductLineItem.
     *
     * If you would like to get a raw Response object use the other addItemToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    addItemToBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Array<ProductItem>;
    }>): Promise<Basket>;
    /**
     * Adds new items to a basket. The added items are associated with the
     specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
     Considered values from the request body, for each item are:
     
     - productId: a valid product ID. This is the ID of the product to be added to the basket. If the
     product is already in the basket, the API either increments the quantity of the existing product line item or
     creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
     product bundles containing variation masters, the API creates a new product line item regardless of the site
     preference.
     - shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item
     is created.
     - quantity: a number between 0.01 and 999. This is the quantity of the product to order.
     - inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is
     allocated.
     - bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the
     bonus discount line item for which the added product is a selected bonus product.
     - optionItems/optionValueId: a valid option value ID. This is an option value for an option item of
     an option product.  This is only possible if the product item is an option
     product. To set option values, you must specify a collection of option items in the optionItems
     property. These option items must contain optionId and optionValueId. Also,
     the values you specify must be valid for the option product that this product item represents. Otherwise, the
     server throws an InvalidProductOptionItemException or an
     InvalidProductOptionValueItemException.
     - custom properties in the form c_\<CUSTOM_NAME\>: the custom property must correspond to a custom
     attribute (\<CUSTOM_NAME\>) defined for ProductLineItem. The value of this property must be valid for the
     type of custom attribute defined for ProductLineItem.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    addItemToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Array<ProductItem>;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Removes a product item from the basket.
     *
     * If you would like to get a raw Response object use the other removeItemFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    removeItemFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Removes a product item from the basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    removeItemFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates an item in a basket. The
     following values in the request body are considered by the server:
     
     - productId: a valid product ID. The purpose of this
     value is to exchange a variation of a variation product.
     - shipmentId: a valid shipment ID. The purpose of
     this value is to move a product item to another shipment.
     - quantity: a number between 0 and 999. The purpose of
     this value is to change quantity of the product item. If quantity is 0,
     the product item is removed.
     - optionItems/optionValueId: a valid option value
     ID. The purpose of this value is to exchange an option value for an
     option item of an option product.
     This is only possible if the product item is an option product. To change
     option values a collection of option items to be changed need to be
     provided in property optionItems. Those
     optionItems need to contain optionId
     and optionValueId. The provided values must be valid
     for the option product that this product item represents. Otherwise
     InvalidProductOptionItemException or
     InvalidProductOptionValueItemException will be thrown.
     custom properties c_\<CUSTOM_NAME\>: a
     value corresponding to the type defined for custom attribute
     \<CUSTOM_NAME\> of ProductLineItem. The purpose of this value is to
     add or change the value of a custom attribute defined for
     ProductLineItem.
     *
     * If you would like to get a raw Response object use the other updateItemInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param removeExternalTax - Updating the quantity of the product item can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The tax values for the product item are set to null and must be recalculated.
     - false: The tax value for the product item will be updated based on the external tax rate (if no tax value was externally computed). Use this setting to prevent an unnecessary external tax call.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateItemInBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ProductItem;
    }>): Promise<Basket>;
    /**
     * Updates an item in a basket. The
     following values in the request body are considered by the server:
     
     - productId: a valid product ID. The purpose of this
     value is to exchange a variation of a variation product.
     - shipmentId: a valid shipment ID. The purpose of
     this value is to move a product item to another shipment.
     - quantity: a number between 0 and 999. The purpose of
     this value is to change quantity of the product item. If quantity is 0,
     the product item is removed.
     - optionItems/optionValueId: a valid option value
     ID. The purpose of this value is to exchange an option value for an
     option item of an option product.
     This is only possible if the product item is an option product. To change
     option values a collection of option items to be changed need to be
     provided in property optionItems. Those
     optionItems need to contain optionId
     and optionValueId. The provided values must be valid
     for the option product that this product item represents. Otherwise
     InvalidProductOptionItemException or
     InvalidProductOptionValueItemException will be thrown.
     custom properties c_\<CUSTOM_NAME\>: a
     value corresponding to the type defined for custom attribute
     \<CUSTOM_NAME\> of ProductLineItem. The purpose of this value is to
     add or change the value of a custom attribute defined for
     ProductLineItem.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param removeExternalTax - Updating the quantity of the product item can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The tax values for the product item are set to null and must be recalculated.
     - false: The tax value for the product item will be updated based on the external tax rate (if no tax value was externally computed). Use this setting to prevent an unnecessary external tax call.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateItemInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ProductItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * If you would like to get a raw Response object use the other addTaxesForBasketItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    addTaxesForBasketItem(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TaxItems;
    }>): Promise<void>;
    /**
     * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    addTaxesForBasketItem<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TaxItems;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Adds a payment instrument to a basket.
     *
     * If you would like to get a raw Response object use the other addPaymentInstrumentToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    addPaymentInstrumentToBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: BasketPaymentInstrumentRequest;
    }>): Promise<Basket>;
    /**
     * Adds a payment instrument to a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    addPaymentInstrumentToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: BasketPaymentInstrumentRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Removes a payment instrument of a basket.
     *
     * If you would like to get a raw Response object use the other removePaymentInstrumentFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    removePaymentInstrumentFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            paymentInstrumentId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Removes a payment instrument of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    removePaymentInstrumentFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            paymentInstrumentId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates payment instrument of an existing basket.
     *
     * If you would like to get a raw Response object use the other updatePaymentInstrumentInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param removeExternalTax - Updating the payment instrument can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the payment instrument change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updatePaymentInstrumentInBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            paymentInstrumentId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrument;
    }>): Promise<Basket>;
    /**
     * Updates payment instrument of an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param removeExternalTax - Updating the payment instrument can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the payment instrument change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updatePaymentInstrumentInBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            paymentInstrumentId: string;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrument;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Gets applicable payment methods for an existing basket considering the open payment amount only.
     *
     * If you would like to get a raw Response object use the other getPaymentMethodsForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PaymentMethodResult.
     *
     */
    getPaymentMethodsForBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PaymentMethodResult>;
    /**
     * Gets applicable payment methods for an existing basket considering the open payment amount only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.
     *
     */
    getPaymentMethodsForBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PaymentMethodResult>;
    /**
     * Gets applicable price books for an existing basket.
     *
     * If you would like to get a raw Response object use the other getPriceBooksForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PriceBookIds.
     *
     */
    getPriceBooksForBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PriceBookIds>;
    /**
     * Gets applicable price books for an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PriceBookIds otherwise.
     *
     */
    getPriceBooksForBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PriceBookIds>;
    /**
     * This method allows you to put an array of priceBookIds to an existing basket, which will be used for basket calculation.
     *
     * If you would like to get a raw Response object use the other addPriceBooksToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    addPriceBooksToBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PriceBookIds;
    }>): Promise<void>;
    /**
     * This method allows you to put an array of priceBookIds to an existing basket, which will be used for basket calculation.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    addPriceBooksToBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PriceBookIds;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Creates a new shipment for a basket.
     
     The created shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * If you would like to get a raw Response object use the other createShipmentForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    createShipmentForBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Shipment;
    }>): Promise<Basket>;
    /**
     * Creates a new shipment for a basket.
     
     The created shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    createShipmentForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Shipment;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Removes a specified shipment and all associated product, gift certificate,
     shipping, and price adjustment line items from a basket.
     It is not allowed to remove the default shipment.
     *
     * If you would like to get a raw Response object use the other removeShipmentFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
    removeShipmentFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Basket>;
    /**
     * Removes a specified shipment and all associated product, gift certificate,
     shipping, and price adjustment line items from a basket.
     It is not allowed to remove the default shipment.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    removeShipmentFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Updates a shipment for a basket.
     
     The shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * If you would like to get a raw Response object use the other updateShipmentForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateShipmentForBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Shipment;
    }>): Promise<Basket>;
    /**
     * Updates a shipment for a basket.
     
     The shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateShipmentForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Shipment;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Sets a shipping address of a specific shipment of a basket.
     *
     * If you would like to get a raw Response object use the other updateShippingAddressForShipment function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param useAsBilling -
     * @param removeExternalTax - Updating the shipping/billing address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the shipping/billing address change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateShippingAddressForShipment(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            useAsBilling?: boolean;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderAddress;
    }>): Promise<Basket>;
    /**
     * Sets a shipping address of a specific shipment of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param useAsBilling -
     * @param removeExternalTax - Updating the shipping/billing address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the shipping/billing address change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateShippingAddressForShipment<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            useAsBilling?: boolean;
            removeExternalTax?: boolean;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderAddress;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Sets a shipping method to a specific shipment of a basket.
     *
     * If you would like to get a raw Response object use the other updateShippingMethodForShipment function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
    updateShippingMethodForShipment(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShippingMethod;
    }>): Promise<Basket>;
    /**
     * Sets a shipping method to a specific shipment of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
    updateShippingMethodForShipment<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShippingMethod;
    }>, rawResponse?: T): Promise<T extends true ? Response : Basket>;
    /**
     * Gets the applicable shipping methods for a certain shipment of a basket.
     *
     * If you would like to get a raw Response object use the other getShippingMethodsForShipment function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type ShippingMethodResult.
     *
     */
    getShippingMethodsForShipment(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<ShippingMethodResult>;
    /**
     * Gets the applicable shipping methods for a certain shipment of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ShippingMethodResult otherwise.
     *
     */
    getShippingMethodsForShipment<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            shipmentId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : ShippingMethodResult>;
    /**
     * This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * If you would like to get a raw Response object use the other getTaxesFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Taxes.
     *
     */
    getTaxesFromBasket(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Taxes>;
    /**
     * This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.
     *
     */
    getTaxesFromBasket<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Taxes>;
    /**
     * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * If you would like to get a raw Response object use the other addTaxesForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    addTaxesForBasket(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Taxes;
    }>): Promise<void>;
    /**
     * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    addTaxesForBasket<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            basketId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Taxes;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
}
type ShopperContext = {
    effectiveDateTime?: any;
    customQualifiers: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
/**
 * All path parameters that are used by at least one ShopperContexts method.
 */
type ShopperContextsPathParameters = {
    organizationId?: string;
    usid?: string;
};
/**
 * All query parameters that are used by at least one ShopperContexts method.
 */
type ShopperContextsQueryParameters = {};
/**
 * All parameters that are used by ShopperContexts.
 */
type ShopperContextsParameters = ShopperContextsPathParameters & BaseUriParameters & ShopperContextsQueryParameters;
/**
 * [Shopper Context (Beta)](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-context:Summary)
 * ==================================
 *
 * *The Shopper Context API enables developers to build highly contextualized shopping experiences for shoppers.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperContexts } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperContextsClient = new ShopperContexts(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 0.0.6<br />
 * Last Updated: <br />
 * </span>
 * @beta
 *
 *
 
 */
declare class ShopperContexts<ConfigParameters extends ShopperContextsParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/shopper/shopper-context/{version}";
    constructor(config: ClientConfigInit<ConfigParameters>);
    /**
     * Gets the shopper's context based on the shopperJWT.
     *
     * If you would like to get a raw Response object use the other getShopperContext function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier if known. This is an optional field, a new shopper ID will be generated if this field is empty.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type ShopperContext.
     *
     * @beta
     *
     */
    getShopperContext(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<ShopperContext>;
    /**
     * Gets the shopper's context based on the shopperJWT.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier if known. This is an optional field, a new shopper ID will be generated if this field is empty.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext otherwise.
     *
     * @beta
     *
     */
    getShopperContext<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : ShopperContext>;
    /**
     * Creates the shopper's context based on shopperJWT.
     *
     * If you would like to get a raw Response object use the other createShopperContext function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier if known. This is an optional field, a new shopper ID will be generated if this field is empty.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type ShopperContext | ShopperContext.
     *
     * @beta
     *
     */
    createShopperContext(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext;
    }>): Promise<ShopperContext | ShopperContext>;
    /**
     * Creates the shopper's context based on shopperJWT.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier if known. This is an optional field, a new shopper ID will be generated if this field is empty.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext | ShopperContext otherwise.
     *
     * @beta
     *
     */
    createShopperContext<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext;
    }>, rawResponse?: T): Promise<T extends true ? Response : ShopperContext | ShopperContext>;
    /**
     * Gets the shopper's context based on the shopperJWT.
     *
     * If you would like to get a raw Response object use the other deleteShopperContext function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier if known. This is an optional field, a new shopper ID will be generated if this field is empty.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     * @beta
     *
     */
    deleteShopperContext(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Gets the shopper's context based on the shopperJWT.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier if known. This is an optional field, a new shopper ID will be generated if this field is empty.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     * @beta
     *
     */
    deleteShopperContext<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Updates the shopper's context based on the shopperJWT. If the shopper context exists, it is updated with the patch body. If a customer qualifiier and/or an effectiveDateTime is already present in the existing shopper context, its value is replaced by corresponding value from patch body. If an effectiveDateTime/customer qualifers' value is set to null it is deleted from existing shopper context. If an effectiveDateTime/customer qualifiier is new, it is added to the existing Shopper context.
     *
     * If you would like to get a raw Response object use the other updateShopperContext function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier if known. This is an optional field, a new shopper ID will be generated if this field is empty.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type ShopperContext.
     *
     * @beta
     *
     */
    updateShopperContext(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext;
    }>): Promise<ShopperContext>;
    /**
     * Updates the shopper's context based on the shopperJWT. If the shopper context exists, it is updated with the patch body. If a customer qualifiier and/or an effectiveDateTime is already present in the existing shopper context, its value is replaced by corresponding value from patch body. If an effectiveDateTime/customer qualifers' value is set to null it is deleted from existing shopper context. If an effectiveDateTime/customer qualifiier is new, it is added to the existing Shopper context.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param usid - The Shopper's unique identifier if known. This is an optional field, a new shopper ID will be generated if this field is empty.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext otherwise.
     *
     * @beta
     *
     */
    updateShopperContext<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            usid: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ShopperContext;
    }>, rawResponse?: T): Promise<T extends true ? Response : ShopperContext>;
}
type CustomerAddress = {
    address1?: string;
    address2?: string;
    addressId: string;
    city?: string;
    companyName?: string;
    countryCode: string;
    creationDate?: any;
    firstName?: string;
    fullName?: string;
    jobTitle?: string;
    lastModified?: any;
    lastName: string;
    phone?: string;
    postBox?: string;
    postalCode?: string;
    preferred?: boolean;
    salutation?: string;
    secondName?: string;
    stateCode?: string;
    suffix?: string;
    suite?: string;
    title?: string;
} & {
    [key: string]: any;
};
type CustomerProductListResult = {
    limit: number;
    data: Array<CustomerProductList>;
    total: number;
} & {
    [key: string]: any;
};
type OptionValue = {
    default?: boolean;
    id: string;
    name?: string;
    price?: number;
} & {
    [key: string]: any;
};
type Master = {
    masterId: string;
    orderable?: boolean;
    price?: number;
    priceMax?: number;
    prices?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type PublicProductListResult = {
    limit: number;
    data: Array<PublicProductListInfo>;
    total: number;
} & {
    [key: string]: any;
};
type BasketsResult$0 = {
    baskets: Array<Basket>;
    total: number;
} & {
    [key: string]: any;
};
type TrustedSystemAuthRequest = {
    clientId: string;
    login: string;
} & {
    [key: string]: any;
};
type ResetPasswordRequest = {
    resetToken: string;
    login: string;
    newPassword: string;
} & {
    [key: string]: any;
};
type PaymentCard$0 = {
    cardType: string;
    creditCardExpired?: boolean;
    creditCardToken?: string;
    expirationMonth?: number;
    expirationYear?: number;
    holder?: string;
    issueNumber?: string;
    maskedNumber?: string;
    numberLastDigits?: string;
    validFromMonth?: number;
    validFromYear?: number;
} & {
    [key: string]: any;
};
type Discount$0 = {
    amount?: number;
    percentage?: number;
    priceBookId?: string;
    type: string;
} & {
    [key: string]: any;
};
type ResetPasswordToken = {
    login: string;
    email: string;
    resetToken: string;
    expiresInMinutes: number;
} & {
    [key: string]: any;
};
type ShippingPromotion$0 = {
    calloutMsg: string;
    promotionId: string;
    promotionName: string;
} & {
    [key: string]: any;
};
type VariationAttribute = {
    id: string;
    name?: string;
    values?: Array<VariationAttributeValue>;
} & {
    [key: string]: any;
};
type ProductListShippingAddress = {
    addressId: string;
    city?: string;
    firstName?: string;
    lastName?: string;
} & {
    [key: string]: any;
};
type ProductItem$0 = {
    adjustedTax?: number;
    basePrice?: number;
    bonusDiscountLineItemId?: string;
    bonusProductLineItem?: boolean;
    bundledProductItems?: Array<ProductItem$0>;
    gift?: boolean;
    giftMessage?: string;
    inventoryId?: string;
    itemId?: string;
    itemText?: string;
    optionItems?: Array<OptionItem>;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment>;
    priceAfterItemDiscount?: number;
    priceAfterOrderDiscount?: number;
    productId?: string;
    productListItem?: ProductListItemReference;
    productName?: string;
    quantity: number;
    shipmentId?: string;
    shippingItemId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type CustomerProductListRegistrant = {
    email: string;
    firstName: string;
    lastName: string;
    role: string;
} & {
    [key: string]: any;
};
type PublicProductListInfo = {
    description?: string;
    id: string;
    name?: string;
    title: string;
    type: string;
} & {
    [key: string]: any;
};
type CustomerPaymentCardRequest = {
    cardType: string;
    creditCardToken?: string;
    expirationMonth: number;
    expirationYear: number;
    holder: string;
    issueNumber: string;
    number: string;
    validFromMonth: number;
    validFromYear: number;
} & {
    [key: string]: any;
};
type RecommendationType = {
    displayValue: string;
    value: number;
} & {
    [key: string]: any;
};
type ProductType = {
    bundle: boolean;
    item: boolean;
    master: boolean;
    option: boolean;
    set: boolean;
    variant: boolean;
    variationGroup: boolean;
} & {
    [key: string]: any;
};
type PaymentBankAccount = {
    driversLicenseLastDigits?: string;
    driversLicenseStateCode?: string;
    holder?: string;
    maskedDriversLicense?: string;
    maskedNumber?: string;
    numberLastDigits?: string;
} & {
    [key: string]: any;
};
type Recommendation = {
    calloutMsg?: string;
    image?: Image;
    longDescription?: string;
    name?: string;
    recommendationType: RecommendationType;
    recommendedItemId?: string;
    recommendedItemLink?: string;
    shortDescription?: string;
} & {
    [key: string]: any;
};
type Variant = {
    orderable?: boolean;
    price?: number;
    productId: string;
    variationValues?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type CustomerPaymentInstrument = {
    bankRoutingNumber?: string;
    creationDate?: any;
    lastModified?: any;
    maskedGiftCertificateCode?: string;
    paymentBankAccount: PaymentBankAccount;
    paymentCard: PaymentCard$0;
    paymentInstrumentId: string;
    paymentMethodId: string;
} & {
    [key: string]: any;
};
type VariationGroup = {
    orderable: boolean;
    price: number;
    productId: string;
    variationValues: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type PaymentBankAccountRequest = {
    driversLicense: string;
    driversLicenseStateCode: string;
    holder: string;
    number: string;
} & {
    [key: string]: any;
};
type PriceAdjustment$0 = {
    appliedDiscount: Discount$0;
    couponCode: string;
    createdBy: string;
    creationDate: any;
    custom: boolean;
    itemText: string;
    lastModified: any;
    manual: boolean;
    price: number;
    priceAdjustmentId: string;
    promotionId: string;
    promotionLink: string;
    reasonCode: string;
} & {
    [key: string]: any;
};
type PublicProductListItem = {
    id: string;
    priority: number;
    product?: Product;
    type: string;
} & {
    [key: string]: any;
};
type ProductDetailsLink$0 = {
    productDescription?: string;
    productId: string;
    productName?: string;
    title?: string;
} & {
    [key: string]: any;
};
type ProductLink = {
    sourceProductId: string;
    sourceProductLink: string;
    targetProductId: string;
    targetProductLink: string;
    type: string;
} & {
    [key: string]: any;
};
type OptionItem$0 = {
    adjustedTax?: number;
    basePrice?: number;
    bonusDiscountLineItemId?: string;
    bonusProductLineItem?: boolean;
    bundledProductItems?: Array<ProductItem$0>;
    gift?: boolean;
    giftMessage?: string;
    inventoryId?: string;
    itemId?: string;
    itemText?: string;
    optionId: string;
    optionItems?: Array<OptionItem$0>;
    optionValueId: string;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment$0>;
    priceAfterItemDiscount?: number;
    priceAfterOrderDiscount?: number;
    productId?: string;
    productListItem?: ProductListItemReference;
    productName?: string;
    quantity?: number;
    shipmentId?: string;
    shippingItemId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type ShippingMethod$0 = {
    description?: string;
    externalShippingMethod?: string;
    id: string;
    name?: string;
    price?: number;
    shippingPromotions?: Array<ShippingPromotion$0>;
} & {
    [key: string]: any;
};
type ProductListEvent = {
    city?: string;
    country?: string;
    date?: any;
    state?: string;
    type: string;
} & {
    [key: string]: any;
};
type PasswordChangeRequest = {
    currentPassword: string;
    password: string;
} & {
    [key: string]: any;
};
type AuthRequest = {
    type?: string;
} & {
    [key: string]: any;
};
type Inventory = {
    ats?: number;
    backorderable?: boolean;
    id: string;
    inStockDate?: any;
    orderable?: boolean;
    preorderable?: boolean;
    stockLevel?: number;
} & {
    [key: string]: any;
};
type CustomerProductList = {
    coRegistrant?: CustomerProductListRegistrant;
    creationDate?: any;
    currentShippingAddressInfo?: CustomerAddressInfo;
    customerProductListItems?: Array<CustomerProductListItem>;
    description?: string;
    event?: ProductListEvent;
    id?: string;
    lastModified?: any;
    name?: string;
    postEventShippingAddressInfo?: CustomerAddressInfo;
    productListShippingAddress?: ProductListShippingAddress;
    public?: boolean;
    registrant?: CustomerProductListRegistrant;
    shippingAddressInfo?: CustomerAddressInfo;
    type?: string;
} & {
    [key: string]: any;
};
type CustomerPaymentInstrumentRequest = {
    bankRoutingNumber: string;
    giftCertificateCode: string;
    paymentBankAccount?: PaymentBankAccountRequest;
    paymentCard: CustomerPaymentCardRequest;
    paymentMethodId: string;
} & {
    [key: string]: any;
};
type ImageGroup = {
    images: Array<Image>;
    variationAttributes?: Array<VariationAttribute>;
    viewType: string;
} & {
    [key: string]: any;
};
type CustomerRegistration = {
    customer: Customer;
    password: string;
} & {
    [key: string]: any;
};
type Customer = {
    addresses?: Array<CustomerAddress>;
    authType?: string;
    birthday?: any;
    companyName?: string;
    creationDate?: any;
    customerId?: string;
    customerNo?: string;
    email?: string;
    enabled?: boolean;
    fax?: string;
    firstName?: string;
    gender?: number;
    jobTitle?: string;
    lastLoginTime?: any;
    lastModified?: any;
    lastName?: string;
    lastVisitTime?: any;
    login?: string;
    note?: string;
    paymentInstruments?: Array<CustomerPaymentInstrument>;
    phoneBusiness?: string;
    phoneHome?: string;
    phoneMobile?: string;
    preferredLocale?: string;
    previousLoginTime?: any;
    previousVisitTime?: any;
    salutation?: string;
    secondName?: string;
    suffix?: string;
    title?: string;
} & {
    [key: string]: any;
};
type PublicProductList = {
    coRegistrant?: ProductListRegistrant;
    creationDate?: any;
    description?: string;
    event?: ProductListEvent;
    id: string;
    lastModified?: any;
    name?: string;
    productListItems?: Array<PublicProductListItem>;
    productListShippingAddress?: ProductListShippingAddress;
    public: boolean;
    registrant?: ProductListRegistrant;
    type: string;
} & {
    [key: string]: any;
};
type Option = {
    description?: string;
    id: string;
    image?: string;
    name?: string;
    values?: Array<OptionValue>;
} & {
    [key: string]: any;
};
type CustomerOrderResult = {
    limit: number;
    data: Array<Order>;
    offset: number;
    total: number;
} & {
    [key: string]: any;
};
type CustomerExtProfileRequest = {
    authenticationProviderId: string;
    email?: string;
    externalId: string;
    firstName?: string;
    lastName?: string;
} & {
    [key: string]: any;
};
type GiftCertificateItem$0 = {
    amount: number;
    giftCertificateItemId?: string;
    message?: string;
    recipientEmail: string;
    recipientName?: string;
    senderName?: string;
    shipmentId?: string;
} & {
    [key: string]: any;
};
type CustomerExternalProfile = {
    customerId: string;
    authenticationProviderId: string;
    email?: string;
    externalId: string;
    firstName?: string;
    lastName?: string;
} & {
    [key: string]: any;
};
type CustomerAddressInfo = {
    addressId: string;
    title: string;
} & {
    [key: string]: any;
};
type ResetPasswordTokenRequest = {
    login: string;
} & {
    [key: string]: any;
};
type ProductListLink$0 = {
    description: string;
    link: string;
    name: string;
    public: boolean;
    title: string;
    type: string;
} & {
    [key: string]: any;
};
type ProductListRegistrant = {
    firstName: string;
    lastName: string;
    role: string;
} & {
    [key: string]: any;
};
type Product = {
    brand?: string;
    bundledProducts?: Array<BundledProduct>;
    currency?: string;
    ean?: string;
    fetchDate?: number;
    id: string;
    imageGroups?: Array<ImageGroup>;
    inventories?: Array<Inventory>;
    inventory?: Inventory;
    longDescription?: string;
    manufacturerName?: string;
    manufacturerSku?: string;
    master?: Master;
    minOrderQuantity?: number;
    name?: string;
    options?: Array<Option>;
    pageDescription?: string;
    pageKeywords?: string;
    pageTitle?: string;
    price?: number;
    priceMax?: number;
    prices?: {} & {
        [key: string]: any;
    };
    primaryCategoryId?: string;
    productLinks?: Array<ProductLink>;
    productPromotions?: Array<ProductPromotion>;
    recommendations?: Array<Recommendation>;
    setProducts?: Array<Product>;
    shortDescription?: string;
    stepQuantity?: number;
    type?: ProductType;
    unit?: string;
    upc?: string;
    validFrom?: any;
    validTo?: any;
    variants?: Array<Variant>;
    variationAttributes?: Array<VariationAttribute>;
    variationGroups?: Array<VariationGroup>;
    variationValues?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type Image = {
    alt?: string;
    disBaseLink?: string;
    link: string;
    title?: string;
} & {
    [key: string]: any;
};
type VariationAttributeValue = {
    description?: string;
    image?: Image;
    imageSwatch?: Image;
    name?: string;
    orderable?: boolean;
    value: string;
} & {
    [key: string]: any;
};
type ProductPromotion = {
    calloutMsg: string;
    promotionId: string;
    promotionalPrice: number;
} & {
    [key: string]: any;
};
type BundledProduct = {
    id: string;
    product: Product;
    quantity: number;
} & {
    [key: string]: any;
};
type Status$0 = {
    code: string;
    message: string;
    status: number;
} & {
    [key: string]: any;
};
type CustomerProductListItem = {
    id?: string;
    priority: number;
    product?: Product;
    productId?: string;
    public: boolean;
    purchasedQuantity?: number;
    quantity: number;
    type?: string;
} & {
    [key: string]: any;
};
type ProductListItemReference$0 = {
    id: string;
    priority?: number;
    productList?: ProductListLink$0;
    public?: boolean;
    purchasedQuantity?: number;
    quantity?: number;
    type?: string;
} & {
    [key: string]: any;
};
type TermQuery$2 = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
} & {
    [key: string]: any;
};
type TextQuery$2 = {
    fields: Array<string>;
    searchPhrase: string;
} & {
    [key: string]: any;
};
type BoolQuery$2 = {
    must?: Array<any>;
    mustNot?: Array<any>;
    should?: Array<any>;
} & {
    [key: string]: any;
};
type NestedQuery$2 = {
    path: string;
    query: any;
    scoreMode?: string;
} & {
    [key: string]: any;
};
/**
 * All path parameters that are used by at least one ShopperCustomers method.
 */
type ShopperCustomersPathParameters = {
    organizationId?: string;
    customerId?: string;
    addressName?: string;
    paymentInstrumentId?: string;
    listId?: string;
    itemId?: string;
};
/**
 * All query parameters that are used by at least one ShopperCustomers method.
 */
type ShopperCustomersQueryParameters = {
    siteId?: string;
    clientId?: string;
    externalId?: string;
    authenticationProviderId?: string;
    crossSites?: boolean;
    from?: string;
    until?: string;
    status?: string;
    offset?: any;
    limit?: number;
    email?: string;
    firstName?: string;
    lastName?: string;
};
/**
 * All parameters that are used by ShopperCustomers.
 */
type ShopperCustomersParameters = ShopperCustomersPathParameters & BaseUriParameters & ShopperCustomersQueryParameters;
/**
 * [Shopper Customers](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-customers:Summary)
 * ==================================
 *
 * *Allow customers to manage their own profiles and product lists.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperCustomers } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperCustomersClient = new ShopperCustomers(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 0.0.28<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
declare class ShopperCustomers<ConfigParameters extends ShopperCustomersParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/customer/shopper-customers/{version}";
    constructor(config: ClientConfigInit<ConfigParameters>);
    /**
     * Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\".
     *
     * If you would like to get a raw Response object use the other registerCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Customer.
     *
     */
    registerCustomer(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerRegistration;
    }>): Promise<Customer>;
    /**
     * Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\".
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
     *
     */
    registerCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerRegistration;
    }>, rawResponse?: T): Promise<T extends true ? Response : Customer>;
    /**
     * Invalidates the JSON Web Token (JWT) provided in the header.
     *
     * If you would like to get a raw Response object use the other invalidateCustomerAuth function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    invalidateCustomerAuth(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Invalidates the JSON Web Token (JWT) provided in the header.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    invalidateCustomerAuth<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Obtains a new JSON Web Token (JWT)for a guest or registered
     customer. Tokens are returned as an HTTP Authorization:Bearer response
     header entry. These kinds of request are supported, as specified by the
     type:
     
     Type guest - creates a guest (non-authenticated) customer
     and returns a token for the customer.
     Request Body for guest : \{\"type\": \"guest\"\}
     Type credentials - authenticates credentials passed in the
     HTTP Authorization:Basic request header, returning a token for a
     successfully authenticated customer, otherwise it throws an
     AuthenticationFailedException.
     Request Body for guest : \{\"type\": \"credentials\"\}
     Type refresh - examines the token passed in the HTTP
     Authorization:Bearer request header and when valid returns a new token
     with an updated expiry time.
     Request Body for guest : \{\"type\": \"refresh\"\}
     
     For a request of type credentials:
     
     Updates profile attributes for the customer (for example,
     \"last-visited\").
     Handles the maximum number of failed login attempts.
     
     About JWT The token contains 3 sections:
     
     The header section (specifies token type and algorithm used),
     the payload section (contains customer information, client ID,
     issue, and expiration time),
     finally the signature section records the token signature.
     
     A token is created and returned to the client whenever a registered
     customer logs in (type \"credentials\") or a guest customer requests it (type
     \"guest\"). The token is returned in the response header as
     Authorization: Bearer --token--
     
     The client has to include the token in the request header as
     Authorization: Bearer --token--
     in any follow-up request. The server declines any follow-up requests
     without a token or which cannot be verified based on the token signature
     or expiration time. A token nearing its expiration time should be
     exchanged for a new one (type \"refresh\").
     
     See \"API Usage \> JWT\" for more details on using JWT as an authentication
     mechanism.
     *
     * If you would like to get a raw Response object use the other authorizeCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param clientId - Client ID for application identification
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Customer.
     *
     */
    authorizeCustomer(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            clientId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: AuthRequest;
    }>): Promise<Customer>;
    /**
     * Obtains a new JSON Web Token (JWT)for a guest or registered
     customer. Tokens are returned as an HTTP Authorization:Bearer response
     header entry. These kinds of request are supported, as specified by the
     type:
     
     Type guest - creates a guest (non-authenticated) customer
     and returns a token for the customer.
     Request Body for guest : \{\"type\": \"guest\"\}
     Type credentials - authenticates credentials passed in the
     HTTP Authorization:Basic request header, returning a token for a
     successfully authenticated customer, otherwise it throws an
     AuthenticationFailedException.
     Request Body for guest : \{\"type\": \"credentials\"\}
     Type refresh - examines the token passed in the HTTP
     Authorization:Bearer request header and when valid returns a new token
     with an updated expiry time.
     Request Body for guest : \{\"type\": \"refresh\"\}
     
     For a request of type credentials:
     
     Updates profile attributes for the customer (for example,
     \"last-visited\").
     Handles the maximum number of failed login attempts.
     
     About JWT The token contains 3 sections:
     
     The header section (specifies token type and algorithm used),
     the payload section (contains customer information, client ID,
     issue, and expiration time),
     finally the signature section records the token signature.
     
     A token is created and returned to the client whenever a registered
     customer logs in (type \"credentials\") or a guest customer requests it (type
     \"guest\"). The token is returned in the response header as
     Authorization: Bearer --token--
     
     The client has to include the token in the request header as
     Authorization: Bearer --token--
     in any follow-up request. The server declines any follow-up requests
     without a token or which cannot be verified based on the token signature
     or expiration time. A token nearing its expiration time should be
     exchanged for a new one (type \"refresh\").
     
     See \"API Usage \> JWT\" for more details on using JWT as an authentication
     mechanism.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param clientId - Client ID for application identification
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
     *
     */
    authorizeCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            clientId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: AuthRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : Customer>;
    /**
     * Obtain the JSON Web Token (JWT) for registered customers whose credentials are stored using a third party system. Accepts loginId and clientId, returns a customer object in the response body and the JWT generated against the clientId in the response header.
     *
     * If you would like to get a raw Response object use the other authorizeTrustedSystem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Customer.
     *
     */
    authorizeTrustedSystem(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TrustedSystemAuthRequest;
    }>): Promise<Customer>;
    /**
     * Obtain the JSON Web Token (JWT) for registered customers whose credentials are stored using a third party system. Accepts loginId and clientId, returns a customer object in the response body and the JWT generated against the clientId in the response header.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
     *
     */
    authorizeTrustedSystem<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: TrustedSystemAuthRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : Customer>;
    /**
     * Reset customer password.
     *
     * If you would like to get a raw Response object use the other resetPassword function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    resetPassword(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ResetPasswordRequest;
    }>): Promise<void>;
    /**
     * Reset customer password.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    resetPassword<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ResetPasswordRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Get reset password token.
     *
     * If you would like to get a raw Response object use the other getResetPasswordToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type ResetPasswordToken.
     *
     */
    getResetPasswordToken(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ResetPasswordTokenRequest;
    }>): Promise<ResetPasswordToken>;
    /**
     * Get reset password token.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ResetPasswordToken otherwise.
     *
     */
    getResetPasswordToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: ResetPasswordTokenRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : ResetPasswordToken>;
    /**
     * Registers a new external profile for a customer. This endpoint is in closed beta, available to select few customers. Please get in touch with your Account Team if you'd like to participate in the beta program
     *
     * If you would like to get a raw Response object use the other registerExternalProfile function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerExternalProfile.
     *
     */
    registerExternalProfile(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerExtProfileRequest;
    }>): Promise<CustomerExternalProfile>;
    /**
     * Registers a new external profile for a customer. This endpoint is in closed beta, available to select few customers. Please get in touch with your Account Team if you'd like to participate in the beta program
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerExternalProfile otherwise.
     *
     */
    registerExternalProfile<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerExtProfileRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerExternalProfile>;
    /**
     * Gets the new external profile for a customer.This endpoint is in closed beta, available to select few customers. Please get in touch with your Account Team if you'd like to participate in the beta program
     *
     * If you would like to get a raw Response object use the other getExternalProfile function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param externalId - The External ID of the customer.
     * @param authenticationProviderId - The authentication Provider Id.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerExternalProfile.
     *
     */
    getExternalProfile(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            externalId: string;
            authenticationProviderId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerExternalProfile>;
    /**
     * Gets the new external profile for a customer.This endpoint is in closed beta, available to select few customers. Please get in touch with your Account Team if you'd like to participate in the beta program
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param externalId - The External ID of the customer.
     * @param authenticationProviderId - The authentication Provider Id.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerExternalProfile otherwise.
     *
     */
    getExternalProfile<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            externalId: string;
            authenticationProviderId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerExternalProfile>;
    /**
     * Gets a customer with all existing addresses and payment instruments associated with the requested customer.
     *
     * If you would like to get a raw Response object use the other getCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Customer.
     *
     */
    getCustomer(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Customer>;
    /**
     * Gets a customer with all existing addresses and payment instruments associated with the requested customer.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
     *
     */
    getCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Customer>;
    /**
     * Updates a customer.
     *
     * If you would like to get a raw Response object use the other updateCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Customer.
     *
     */
    updateCustomer(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Customer;
    }>): Promise<Customer>;
    /**
     * Updates a customer.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
     *
     */
    updateCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Customer;
    }>, rawResponse?: T): Promise<T extends true ? Response : Customer>;
    /**
     * Creates a new address with the given name for the given customer.
     *
     * If you would like to get a raw Response object use the other createCustomerAddress function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerAddress.
     *
     */
    createCustomerAddress(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerAddress;
    }>): Promise<CustomerAddress>;
    /**
     * Creates a new address with the given name for the given customer.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
     *
     */
    createCustomerAddress<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerAddress;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerAddress>;
    /**
     * Retrieves a customer's address by address name.
     *
     * If you would like to get a raw Response object use the other getCustomerAddress function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerAddress.
     *
     */
    getCustomerAddress(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerAddress>;
    /**
     * Retrieves a customer's address by address name.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
     *
     */
    getCustomerAddress<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerAddress>;
    /**
     * Deletes a customer's address by address name.
     *
     * If you would like to get a raw Response object use the other removeCustomerAddress function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    removeCustomerAddress(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Deletes a customer's address by address name.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    removeCustomerAddress<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Updates a customer's address by address name.
     *
     * If you would like to get a raw Response object use the other updateCustomerAddress function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerAddress.
     *
     */
    updateCustomerAddress(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerAddress;
    }>): Promise<CustomerAddress>;
    /**
     * Updates a customer's address by address name.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param addressName - The name of the address to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
     *
     */
    updateCustomerAddress<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            addressName: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerAddress;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerAddress>;
    /**
     * Gets the baskets of a customer.
     *
     * If you would like to get a raw Response object use the other getCustomerBaskets function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type BasketsResult.
     *
     */
    getCustomerBaskets(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<BasketsResult$0>;
    /**
     * Gets the baskets of a customer.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type BasketsResult otherwise.
     *
     */
    getCustomerBaskets<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : BasketsResult$0>;
    /**
     * Returns a pageable list of all customer's orders. The default page size is 10.
     *
     * If you would like to get a raw Response object use the other getCustomerOrders function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param crossSites -
     * @param from -
     * @param until -
     * @param status -
     * @param siteId -
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 10.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerOrderResult.
     *
     */
    getCustomerOrders(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            crossSites?: boolean;
            from?: string;
            until?: string;
            status?: string;
            siteId: string;
            offset?: any;
            limit?: number;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerOrderResult>;
    /**
     * Returns a pageable list of all customer's orders. The default page size is 10.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param crossSites -
     * @param from -
     * @param until -
     * @param status -
     * @param siteId -
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 10.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerOrderResult otherwise.
     *
     */
    getCustomerOrders<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            crossSites?: boolean;
            from?: string;
            until?: string;
            status?: string;
            siteId: string;
            offset?: any;
            limit?: number;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerOrderResult>;
    /**
     * Updates the customer's password.
     *
     * If you would like to get a raw Response object use the other updateCustomerPassword function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
    updateCustomerPassword(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordChangeRequest;
    }>): Promise<void>;
    /**
     * Updates the customer's password.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    updateCustomerPassword<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: PasswordChangeRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Adds a payment instrument to the customer information.
     *
     * If you would like to get a raw Response object use the other createCustomerPaymentInstrument function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerPaymentInstrument.
     *
     */
    createCustomerPaymentInstrument(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerPaymentInstrumentRequest;
    }>): Promise<CustomerPaymentInstrument>;
    /**
     * Adds a payment instrument to the customer information.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerPaymentInstrument otherwise.
     *
     */
    createCustomerPaymentInstrument<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerPaymentInstrumentRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerPaymentInstrument>;
    /**
     * Deletes a customer's payment instrument.
     *
     * If you would like to get a raw Response object use the other deleteCustomerPaymentInstrument function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    deleteCustomerPaymentInstrument(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            paymentInstrumentId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Deletes a customer's payment instrument.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    deleteCustomerPaymentInstrument<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            paymentInstrumentId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Retrieves a customer's payment instrument by its ID.
     *
     * If you would like to get a raw Response object use the other getCustomerPaymentInstrument function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerPaymentInstrument.
     *
     */
    getCustomerPaymentInstrument(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            paymentInstrumentId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerPaymentInstrument>;
    /**
     * Retrieves a customer's payment instrument by its ID.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerPaymentInstrument otherwise.
     *
     */
    getCustomerPaymentInstrument<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            paymentInstrumentId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerPaymentInstrument>;
    /**
     * Returns all customer product lists.
     *
     * If you would like to get a raw Response object use the other getCustomerProductLists function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerProductListResult.
     *
     */
    getCustomerProductLists(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerProductListResult>;
    /**
     * Returns all customer product lists.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListResult otherwise.
     *
     */
    getCustomerProductLists<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListResult>;
    /**
     * Creates a customer product list.
     *
     * If you would like to get a raw Response object use the other createCustomerProductList function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerProductList.
     *
     */
    createCustomerProductList(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductList;
    }>): Promise<CustomerProductList>;
    /**
     * Creates a customer product list.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
     *
     */
    createCustomerProductList<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductList;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductList>;
    /**
     * Deletes a customer product list.
     *
     * If you would like to get a raw Response object use the other deleteCustomerProductList function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    deleteCustomerProductList(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Deletes a customer product list.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    deleteCustomerProductList<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Returns a customer product list of the given customer and the items in the list.
     *
     * If you would like to get a raw Response object use the other getCustomerProductList function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerProductList.
     *
     */
    getCustomerProductList(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerProductList>;
    /**
     * Returns a customer product list of the given customer and the items in the list.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
     *
     */
    getCustomerProductList<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductList>;
    /**
     * Changes a product list. Changeable properties are the name, description, and if the list is public.
     *
     * If you would like to get a raw Response object use the other updateCustomerProductList function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerProductList.
     *
     */
    updateCustomerProductList(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductList;
    }>): Promise<CustomerProductList>;
    /**
     * Changes a product list. Changeable properties are the name, description, and if the list is public.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
     *
     */
    updateCustomerProductList<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductList;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductList>;
    /**
     * Adds an item to the customer's product list. Considered values from the request body are:
     
     type: A valid type, mandatory. This is the type of the item to be added to the customer's product.
     list.
     priority: This is the priority of the item to be added to the customer's product list.
     public: This is the flag whether the item to be added to the customer's product list is public.
     product_id: A valid product ID, used for product item type only. This is the ID (SKU)
     of the product related to the item to be added to the customer's product list. It is mandatory for
     product item type, and it must be a valid product id, otherwise
     ProductListProductIdMissingException or ProductListProductNotFoundException
     will be thrown.
     quantity: Used for product item type only. This is the quantity of the item to be
     added to the customer's product list.
     custom properties in the form c_\<CUSTOM_NAME\>: The custom property must correspond to a custom
     attribute (\<CUSTOM_NAME\>) defined for ProductListItem. The value of this property must be valid for the
     type of custom attribute defined for ProductListItem.
     *
     * If you would like to get a raw Response object use the other createCustomerProductListItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerProductListItem.
     *
     */
    createCustomerProductListItem(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductListItem;
    }>): Promise<CustomerProductListItem>;
    /**
     * Adds an item to the customer's product list. Considered values from the request body are:
     
     type: A valid type, mandatory. This is the type of the item to be added to the customer's product.
     list.
     priority: This is the priority of the item to be added to the customer's product list.
     public: This is the flag whether the item to be added to the customer's product list is public.
     product_id: A valid product ID, used for product item type only. This is the ID (SKU)
     of the product related to the item to be added to the customer's product list. It is mandatory for
     product item type, and it must be a valid product id, otherwise
     ProductListProductIdMissingException or ProductListProductNotFoundException
     will be thrown.
     quantity: Used for product item type only. This is the quantity of the item to be
     added to the customer's product list.
     custom properties in the form c_\<CUSTOM_NAME\>: The custom property must correspond to a custom
     attribute (\<CUSTOM_NAME\>) defined for ProductListItem. The value of this property must be valid for the
     type of custom attribute defined for ProductListItem.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
     *
     */
    createCustomerProductListItem<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductListItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListItem>;
    /**
     * Removes an item from a customer product list.
     *
     * If you would like to get a raw Response object use the other deleteCustomerProductListItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
    deleteCustomerProductListItem(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<void>;
    /**
     * Removes an item from a customer product list.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
    deleteCustomerProductListItem<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : void>;
    /**
     * Returns an item of a customer product list and the actual product details like image, availability and price.
     *
     * If you would like to get a raw Response object use the other getCustomerProductListItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CustomerProductListItem.
     *
     */
    getCustomerProductListItem(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CustomerProductListItem>;
    /**
     * Returns an item of a customer product list and the actual product details like image, availability and price.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
     *
     */
    getCustomerProductListItem<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListItem>;
    /**
     * Updates an item of a customer's product list.
     Considered values from the request body are:
     
     priority: This is the priority of the customer's product list item.
     public: This is the flag whether the customer's product list item is public.
     quantity: This is the quantity of
     the customer's product list item. Used for product item type only.
     custom properties in the form c_\<CUSTOM_NAME\>: The custom property
     must correspond to a custom attribute (\<CUSTOM_NAME\>) defined for ProductListItem.
     The value of this property must be valid for the type of custom attribute defined for ProductListItem.
     *
     * If you would like to get a raw Response object use the other updateCustomerProductListItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type CustomerProductListItem.
     *
     */
    updateCustomerProductListItem(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductListItem;
    }>): Promise<CustomerProductListItem>;
    /**
     * Updates an item of a customer's product list.
     Considered values from the request body are:
     
     priority: This is the priority of the customer's product list item.
     public: This is the flag whether the customer's product list item is public.
     quantity: This is the quantity of
     the customer's product list item. Used for product item type only.
     custom properties in the form c_\<CUSTOM_NAME\>: The custom property
     must correspond to a custom attribute (\<CUSTOM_NAME\>) defined for ProductListItem.
     The value of this property must be valid for the type of custom attribute defined for ProductListItem.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param customerId - The customer ID.
     * @param listId - The product list ID.
     * @param itemId - The ID of the product list item to update.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
     *
     */
    updateCustomerProductListItem<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            customerId: string;
            listId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: CustomerProductListItem;
    }>, rawResponse?: T): Promise<T extends true ? Response : CustomerProductListItem>;
    /**
     * Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name).
     *
     * If you would like to get a raw Response object use the other getPublicProductListsBySearchTerm function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param email - The email address of the customer the product lists belong to.
     * @param firstName - The first name of the customer the product lists belong to.
     * @param lastName - The last name of the customer the product lists belong to.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PublicProductListResult.
     *
     */
    getPublicProductListsBySearchTerm(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PublicProductListResult>;
    /**
     * Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name).
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param email - The email address of the customer the product lists belong to.
     * @param firstName - The first name of the customer the product lists belong to.
     * @param lastName - The last name of the customer the product lists belong to.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductListResult otherwise.
     *
     */
    getPublicProductListsBySearchTerm<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PublicProductListResult>;
    /**
     * Retrieves a public product list by ID and the items under that product list.
     *
     * If you would like to get a raw Response object use the other getPublicProductList function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param listId - The ID of the list.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PublicProductList.
     *
     */
    getPublicProductList(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            listId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PublicProductList>;
    /**
     * Retrieves a public product list by ID and the items under that product list.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param listId - The ID of the list.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductList otherwise.
     *
     */
    getPublicProductList<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            listId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PublicProductList>;
    /**
     * Retrieves an item from a public product list and the actual product details like product, image, availability and price.
     *
     * If you would like to get a raw Response object use the other getProductListItem function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param listId - The ID of the list.
     * @param itemId - The ID of the item.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PublicProductListItem.
     *
     */
    getProductListItem(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            listId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PublicProductListItem>;
    /**
     * Retrieves an item from a public product list and the actual product details like product, image, availability and price.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param listId - The ID of the list.
     * @param itemId - The ID of the item.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductListItem otherwise.
     *
     */
    getProductListItem<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            listId: string;
            itemId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PublicProductListItem>;
}
type MatchAllQuery$3 = {} & {
    [key: string]: any;
};
type FilteredQuery$3 = {
    filter: any;
    query: any;
} & {
    [key: string]: any;
};
type Query$3 = {
    boolQuery?: BoolQuery$2;
    filteredQuery?: FilteredQuery$3;
    matchAllQuery?: MatchAllQuery$3;
    nestedQuery?: NestedQuery$2;
    termQuery?: TermQuery$2;
    textQuery?: TextQuery$2;
} & {
    [key: string]: any;
};
type ExpansionAttribute = {
    attributeId: string;
    path: string;
    value: any;
} & {
    [key: string]: any;
};
type PaginationLinks = {
    prev?: Self;
    self: Self;
    next?: Self;
} & {
    [key: string]: any;
};
type Self = {
    href: string;
};
type QueryOutput = {
    hits: Array<Result>;
    facets?: Array<FacetOutput>;
    links: PaginationLinks;
    limit: number;
    offset: any;
    total: any;
};
type QueryInput = {
    query?: Query$3;
    refinements?: Array<Refinement>;
    returnedAttributes?: Array<string>;
    grouping?: Grouping;
    facets?: Array<FacetInput>;
    facetRequest?: FacetRequest;
    sorting: Sorting;
};
type Refinement = {
    attributeId: string;
    refinementType: string;
} & {
    [key: string]: any;
};
type FacetInput = {
    attributeId: string;
    facetType: string;
} & {
    [key: string]: any;
};
type FacetRequest = {
    facetLimit?: any;
    facets?: Array<FacetInput>;
} & {
    [key: string]: any;
};
type FacetOutput = {
    attributeId: string;
    facetType: string;
} & {
    [key: string]: any;
};
type Sorting = {
    sortType: string;
} & {
    [key: string]: any;
};
type Grouping = {
    groupType: string;
} & {
    [key: string]: any;
};
type ItemReference = {
    itemId: string;
    attributes?: Array<ExpansionAttribute>;
} & {
    [key: string]: any;
};
type Highlight = {
    attributeId: string;
    value: string;
} & {
    [key: string]: any;
};
type Result = {
    matchedItem: ItemReference;
    highlights?: Array<Highlight>;
    groupId?: string;
    totalGroupedItems?: any;
    groupedItems?: Array<ItemReference>;
};
type Suggestion = {
    phrase: string;
};
type Suggestions = {
    recentSearchPhrases?: Array<Suggestion>;
    suggestedSearchPhrases?: Array<Suggestion>;
    popularSearchPhrases?: Array<Suggestion>;
};
/**
 * All path parameters that are used by at least one ShopperDiscoverySearch method.
 */
type ShopperDiscoverySearchPathParameters = {
    organizationId?: string;
    channelId?: string;
};
/**
 * All query parameters that are used by at least one ShopperDiscoverySearch method.
 */
type ShopperDiscoverySearchQueryParameters = {
    locale?: string;
    offset?: any;
    limit?: number;
    suggestionTypes?: Array<string>;
    searchText?: string;
};
/**
 * All parameters that are used by ShopperDiscoverySearch.
 */
type ShopperDiscoverySearchParameters = ShopperDiscoverySearchPathParameters & BaseUriParameters & ShopperDiscoverySearchQueryParameters;
/**
 * [Shopper Discovery Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-discovery-search:Summary)
 * ==================================
 *
 * *Einstein-powered product search and search suggestions.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperDiscoverySearch } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperDiscoverySearchClient = new ShopperDiscoverySearch(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.1.6<br />
 * Last Updated: <br />
 * </span>
 * @beta
 *
 *
 
 */
declare class ShopperDiscoverySearch<ConfigParameters extends ShopperDiscoverySearchParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/discovery/query/{version}";
    constructor(config: ClientConfigInit<ConfigParameters>);
    /**
     * This method retrieves search results for a Channel.
     *
     * If you would like to get a raw Response object use the other retrieveResults function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param channelId - The unique identifier of a Channel.
     * @param locale -
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 240. Defaults to 30.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type QueryOutput.
     *
     * @beta
     *
     */
    retrieveResults(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channelId: string;
            locale: string;
            offset?: any;
            limit?: number;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: QueryInput;
    }>): Promise<QueryOutput>;
    /**
     * This method retrieves search results for a Channel.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param channelId - The unique identifier of a Channel.
     * @param locale -
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 240. Defaults to 30.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type QueryOutput otherwise.
     *
     * @beta
     *
     */
    retrieveResults<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channelId: string;
            locale: string;
            offset?: any;
            limit?: number;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: QueryInput;
    }>, rawResponse?: T): Promise<T extends true ? Response : QueryOutput>;
    /**
     * This method gets suggestions for the user's search activity for a channel.
     *
     * If you would like to get a raw Response object use the other getSuggestions function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param channelId - The unique identifier of a Channel.
     * @param suggestionTypes - The types of suggestions to return.
     * @param searchText - The optional text to retrieve suggestions for.
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Suggestions.
     *
     * @beta
     *
     */
    getSuggestions(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channelId: string;
            suggestionTypes: Array<string>;
            searchText?: string;
            locale: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Suggestions>;
    /**
     * This method gets suggestions for the user's search activity for a channel.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param channelId - The unique identifier of a Channel.
     * @param suggestionTypes - The types of suggestions to return.
     * @param searchText - The optional text to retrieve suggestions for.
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Suggestions otherwise.
     *
     * @beta
     *
     */
    getSuggestions<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            channelId: string;
            suggestionTypes: Array<string>;
            searchText?: string;
            locale: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Suggestions>;
}
type GiftCertificate = {
    amount: number;
    balance: number;
    description?: string;
    enabled: boolean;
    maskedGiftCertificateCode: string;
    merchantId: string;
    message?: string;
    recipientEmail: string;
    recipientName: string;
    senderName: string;
    status: string;
} & {
    [key: string]: any;
};
type GiftCertificateRequest = {
    giftCertificateCode: string;
} & {
    [key: string]: any;
};
/**
 * All path parameters that are used by at least one ShopperGiftCertificates method.
 */
type ShopperGiftCertificatesPathParameters = {
    organizationId?: string;
};
/**
 * All query parameters that are used by at least one ShopperGiftCertificates method.
 */
type ShopperGiftCertificatesQueryParameters = {
    siteId?: string;
};
/**
 * All parameters that are used by ShopperGiftCertificates.
 */
type ShopperGiftCertificatesParameters = ShopperGiftCertificatesPathParameters & BaseUriParameters & ShopperGiftCertificatesQueryParameters;
/**
 * [Shopper Gift Certificates](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-gift-certificates:Summary)
 * ==================================
 *
 * *Obtain details about a gift certificate.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperGiftCertificates } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperGiftCertificatesClient = new ShopperGiftCertificates(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.0.11<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
declare class ShopperGiftCertificates<ConfigParameters extends ShopperGiftCertificatesParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/pricing/shopper-gift-certificates/{version}";
    constructor(config: ClientConfigInit<ConfigParameters>);
    /**
     * Action to retrieve an existing gift certificate.
     *
     * If you would like to get a raw Response object use the other getGiftCertificate function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type GiftCertificate.
     *
     */
    getGiftCertificate(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateRequest;
    }>): Promise<GiftCertificate>;
    /**
     * Action to retrieve an existing gift certificate.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type GiftCertificate otherwise.
     *
     */
    getGiftCertificate<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: GiftCertificateRequest;
    }>, rawResponse?: T): Promise<T extends true ? Response : GiftCertificate>;
}
type OrderAddress$1 = {
    address1?: string;
    address2?: string;
    city?: string;
    companyName?: string;
    countryCode?: string;
    firstName?: string;
    fullName?: string;
    id?: string;
    jobTitle?: string;
    lastName?: string;
    phone?: string;
    postBox?: string;
    postalCode?: string;
    salutation?: string;
    secondName?: string;
    stateCode?: string;
    suffix?: string;
    suite?: string;
    title?: string;
} & {
    [key: string]: any;
};
type PaymentCard$1 = {
    cardType?: string;
    creditCardExpired?: boolean;
    creditCardToken?: string;
    expirationMonth?: number;
    expirationYear?: number;
    holder?: string;
    issueNumber?: string;
    maskedNumber?: string;
    numberLastDigits?: string;
    validFromMonth?: number;
    validFromYear?: number;
};
type ShippingItem$1 = {
    adjustedTax?: number;
    basePrice?: number;
    itemId?: string;
    itemText?: string;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment$0>;
    priceAfterItemDiscount?: number;
    shipmentId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type Discount$1 = {
    amount?: number;
    percentage?: number;
    priceBookId?: string;
    type: string;
} & {
    [key: string]: any;
};
type CouponItem$1 = {
    code: string;
    couponItemId?: string;
    statusCode?: string;
    valid?: boolean;
} & {
    [key: string]: any;
};
type ProductItem$1 = {
    adjustedTax?: number;
    basePrice?: number;
    bonusDiscountLineItemId?: string;
    bonusProductLineItem?: boolean;
    bundledProductItems?: Array<ProductItem$1>;
    gift?: boolean;
    giftMessage?: string;
    inventoryId?: string;
    itemId?: string;
    itemText?: string;
    optionItems?: Array<OptionItem$0>;
    price?: number;
    priceAdjustments?: Array<PriceAdjustment$0>;
    priceAfterItemDiscount?: number;
    priceAfterOrderDiscount?: number;
    productId?: string;
    productListItem?: ProductListItemReference$0;
    productName?: string;
    quantity?: number;
    shipmentId?: string;
    shippingItemId?: string;
    tax?: number;
    taxBasis?: number;
    taxClassId?: string;
    taxRate?: number;
} & {
    [key: string]: any;
};
type Taxes$0 = {
    taxes: {} & {
        [key: string]: any;
    };
};
type OrderPaymentInstrument$1 = {
    amount?: number;
    authorizationStatus?: Status$0;
    bankRoutingNumber?: string;
    maskedGiftCertificateCode?: string;
    paymentCard?: PaymentCard$1;
    paymentInstrumentId?: string;
    paymentMethodId?: string;
} & {
    [key: string]: any;
};
type BonusDiscountLineItem$1 = {
    bonusProducts?: Array<ProductDetailsLink$0>;
    couponCode?: string;
    id?: string;
    maxBonusItems?: number;
    promotionId?: string;
} & {
    [key: string]: any;
};
type PaymentMethodResult$0 = {
    applicablePaymentMethods?: Array<PaymentMethod>;
} & {
    [key: string]: any;
};
type Shipment$1 = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    gift?: boolean;
    giftMessage?: string;
    merchandizeTotalTax?: number;
    productSubTotal?: number;
    productTotal?: number;
    shipmentId?: string;
    shipmentNo?: string;
    shipmentTotal?: number;
    shippingAddress?: OrderAddress$1;
    shippingMethod?: ShippingMethod$0;
    shippingStatus?: string;
    shippingTotal?: number;
    shippingTotalTax?: number;
    taxTotal?: number;
    trackingNumber?: string;
} & {
    [key: string]: any;
};
type CustomerInfo$1 = {
    customerId?: string;
    customerName?: string;
    customerNo?: string;
    email: string;
} & {
    [key: string]: any;
};
type SimpleLink$1 = {};
type PriceAdjustment$1 = {
    appliedDiscount?: Discount$1;
    couponCode?: string;
    createdBy?: string;
    creationDate?: any;
    custom?: boolean;
    itemText?: string;
    lastModified?: any;
    manual?: boolean;
    price?: number;
    priceAdjustmentId?: string;
    promotionId?: string;
    promotionLink?: string;
    reasonCode?: string;
} & {
    [key: string]: any;
};
type Basket$1 = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    agentBasket?: boolean;
    basketId?: string;
    billingAddress?: OrderAddress$1;
    bonusDiscountLineItems?: Array<BonusDiscountLineItem$1>;
    channelType?: string;
    couponItems?: Array<CouponItem$1>;
    creationDate?: any;
    currency?: string;
    customerInfo?: CustomerInfo$1;
    giftCertificateItems?: Array<GiftCertificateItem$0>;
    inventoryReservationExpiry?: any;
    lastModified?: any;
    merchandizeTotalTax?: number;
    notes?: SimpleLink$1;
    orderPriceAdjustments?: Array<PriceAdjustment$1>;
    orderTotal?: number;
    paymentInstruments?: Array<OrderPaymentInstrument$1>;
    productItems?: Array<ProductItem$1>;
    productSubTotal?: number;
    productTotal?: number;
    shipments?: Array<Shipment$1>;
    shippingItems?: Array<ShippingItem$1>;
    shippingTotal?: number;
    shippingTotalTax?: number;
    sourceCode?: string;
    taxTotal?: number;
    taxation?: string;
} & {
    [key: string]: any;
};
type OrderPaymentInstrumentRequest$0 = {
    amount?: number;
    bankRoutingNumber?: string;
    giftCertificateCode?: string;
    paymentCard?: OrderPaymentCardRequest;
    paymentMethodId?: string;
} & {
    [key: string]: any;
};
type GiftCertificateItem$1 = {
    amount: number;
    giftCertificateItemId?: string;
    message?: string;
    recipientEmail: string;
    recipientName?: string;
    senderName?: string;
    shipmentId?: string;
} & {
    [key: string]: any;
};
type Order$1 = {
    adjustedMerchandizeTotalTax?: number;
    adjustedShippingTotalTax?: number;
    billingAddress?: OrderAddress$1;
    bonusDiscountLineItems?: Array<BonusDiscountLineItem$1>;
    channelType?: string;
    confirmationStatus?: string;
    couponItems?: Array<CouponItem$1>;
    createdBy?: string;
    creationDate?: any;
    currency?: string;
    customerInfo?: CustomerInfo$1;
    customerName?: string;
    exportStatus?: string;
    externalOrderStatus?: string;
    giftCertificateItems?: Array<GiftCertificateItem$1>;
    globalPartyId?: string;
    lastModified?: any;
    merchandizeTotalTax?: number;
    notes?: SimpleLink$1;
    orderNo?: string;
    orderPriceAdjustments?: Array<PriceAdjustment$1>;
    orderToken?: string;
    orderTotal?: number;
    paymentInstruments?: Array<OrderPaymentInstrument$1>;
    paymentStatus?: string;
    productItems?: Array<ProductItem$1>;
    productSubTotal?: number;
    productTotal?: number;
    shipments?: Array<Shipment$1>;
    shippingItems?: Array<ShippingItem$1>;
    shippingStatus?: string;
    shippingTotal?: number;
    shippingTotalTax?: number;
    siteId?: string;
    sourceCode?: string;
    status?: string;
    taxTotal?: number;
    taxation?: string;
} & {
    [key: string]: any;
};
/**
 * All path parameters that are used by at least one ShopperOrders method.
 */
type ShopperOrdersPathParameters = {
    organizationId?: string;
    orderNo?: string;
    paymentInstrumentId?: string;
};
/**
 * All query parameters that are used by at least one ShopperOrders method.
 */
type ShopperOrdersQueryParameters = {
    siteId?: string;
    locale?: string;
};
/**
 * All parameters that are used by ShopperOrders.
 */
type ShopperOrdersParameters = ShopperOrdersPathParameters & BaseUriParameters & ShopperOrdersQueryParameters;
/**
 * [Shopper Orders](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-orders:Summary)
 * ==================================
 *
 * *Finish the shopper checkout experience resulting in an order.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperOrders } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperOrdersClient = new ShopperOrders(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 0.2.0<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
declare class ShopperOrders<ConfigParameters extends ShopperOrdersParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-orders/{version}";
    constructor(config: ClientConfigInit<ConfigParameters>);
    /**
     * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
     *
     * If you would like to get a raw Response object use the other createOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Order.
     *
     */
    createOrder(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket$1;
    }>): Promise<Order$1>;
    /**
     * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
    createOrder<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: Basket$1;
    }>, rawResponse?: T): Promise<T extends true ? Response : Order$1>;
    /**
     * Gets information for an order.
     *
     * If you would like to get a raw Response object use the other getOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Order.
     *
     */
    getOrder(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Order$1>;
    /**
     * Gets information for an order.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
    getOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Order$1>;
    /**
     * Adds a payment instrument to an order.
     
     Details:
     
     The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
     /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
     *
     * If you would like to get a raw Response object use the other createPaymentInstrumentForOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Order.
     *
     */
    createPaymentInstrumentForOrder(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrumentRequest$0;
    }>): Promise<Order$1>;
    /**
     * Adds a payment instrument to an order.
     
     Details:
     
     The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
     /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
    createPaymentInstrumentForOrder<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrumentRequest$0;
    }>, rawResponse?: T): Promise<T extends true ? Response : Order$1>;
    /**
     * Removes a payment instrument of an order.
     *
     * If you would like to get a raw Response object use the other removePaymentInstrumentFromOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Order.
     *
     */
    removePaymentInstrumentFromOrder(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Order$1>;
    /**
     * Removes a payment instrument of an order.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
    removePaymentInstrumentFromOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Order$1>;
    /**
     * Updates a payment instrument of an order.
     
     Details:
     
     The payment instrument is updated with the provided details. The payment method must be applicable for the
     order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
     paymentCard must be specified in the request.
     *
     * If you would like to get a raw Response object use the other updatePaymentInstrumentForOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Order.
     *
     */
    updatePaymentInstrumentForOrder(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrumentRequest$0;
    }>): Promise<Order$1>;
    /**
     * Updates a payment instrument of an order.
     
     Details:
     
     The payment instrument is updated with the provided details. The payment method must be applicable for the
     order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
     paymentCard must be specified in the request.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
    updatePaymentInstrumentForOrder<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            paymentInstrumentId: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
        body: OrderPaymentInstrumentRequest$0;
    }>, rawResponse?: T): Promise<T extends true ? Response : Order$1>;
    /**
     * Gets the applicable payment methods for an existing order considering the open payment amount only.
     *
     * If you would like to get a raw Response object use the other getPaymentMethodsForOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PaymentMethodResult.
     *
     */
    getPaymentMethodsForOrder(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PaymentMethodResult$0>;
    /**
     * Gets the applicable payment methods for an existing order considering the open payment amount only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.
     *
     */
    getPaymentMethodsForOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PaymentMethodResult$0>;
    /**
     * This method gives you the external taxation data of the order transferred from the basket during
     order creation. This endpoint can be called only if external taxation was used. See POST /baskets
     for more information.
     *
     * If you would like to get a raw Response object use the other getTaxesFromOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Taxes.
     *
     */
    getTaxesFromOrder(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Taxes$0>;
    /**
     * This method gives you the external taxation data of the order transferred from the basket during
     order creation. This endpoint can be called only if external taxation was used. See POST /baskets
     for more information.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.
     *
     */
    getTaxesFromOrder<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            orderNo: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Taxes$0>;
}
type ProductPriceTable = {
    price?: number;
    pricebook?: string;
    quantity?: number;
} & {
    [key: string]: any;
};
type PriceRange = {
    maxPrice?: number;
    minPrice?: number;
    pricebook?: string;
} & {
    [key: string]: any;
};
type OptionValue$0 = {
    default?: boolean;
    id: string;
    name?: string;
    price?: number;
} & {
    [key: string]: any;
};
type Master$0 = {
    masterId: string;
    orderable?: boolean;
    price?: number;
    priceMax?: number;
    prices?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type Category = {
    categories?: Array<Category>;
    description?: string;
    id: string;
    image?: string;
    name?: string;
    pageDescription?: string;
    pageKeywords?: string;
    pageTitle?: string;
    parentCategoryId?: string;
    parentCategoryTree?: Array<PathRecord>;
    thumbnail?: string;
} & {
    [key: string]: any;
};
type CategoryResult = {
    limit: number;
    data: Array<Category>;
    total: number;
} & {
    [key: string]: any;
};
type VariationAttribute$0 = {
    id: string;
    name?: string;
    values?: Array<VariationAttributeValue>;
} & {
    [key: string]: any;
};
type RecommendationType$0 = {
    displayValue: string;
    value: number;
} & {
    [key: string]: any;
};
type ProductType$0 = {
    bundle?: boolean;
    item?: boolean;
    master?: boolean;
    option?: boolean;
    set?: boolean;
    variant?: boolean;
    variationGroup?: boolean;
} & {
    [key: string]: any;
};
type Recommendation$0 = {
    calloutMsg?: string;
    image?: Image;
    longDescription?: string;
    name?: string;
    recommendationType: RecommendationType$0;
    recommendedItemId?: string;
    shortDescription?: string;
} & {
    [key: string]: any;
};
type Variant$0 = {
    orderable?: boolean;
    price?: number;
    productId: string;
    tieredPrices?: Array<ProductPriceTable>;
    variationValues?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type VariationGroup$0 = {
    orderable: boolean;
    price: number;
    productId: string;
    variationValues: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type ProductResult = {
    limit: number;
    data: Array<Product>;
    total: number;
} & {
    [key: string]: any;
};
type ProductLink$0 = {
    sourceProductId: string;
    sourceProductLink: string;
    targetProductId: string;
    targetProductLink: string;
    type: string;
} & {
    [key: string]: any;
};
type Inventory$0 = {
    ats?: number;
    backorderable?: boolean;
    id: string;
    inStockDate?: any;
    orderable?: boolean;
    preorderable?: boolean;
    stockLevel?: number;
} & {
    [key: string]: any;
};
type ImageGroup$0 = {
    images: Array<Image>;
    variationAttributes?: Array<VariationAttribute$0>;
    viewType: string;
} & {
    [key: string]: any;
};
type Option$0 = {
    description?: string;
    id: string;
    image?: string;
    name?: string;
    values?: Array<OptionValue$0>;
} & {
    [key: string]: any;
};
type Product$0 = {
    brand?: string;
    bundledProducts?: Array<BundledProduct>;
    currency?: string;
    ean?: string;
    fetchDate?: number;
    id: string;
    imageGroups?: Array<ImageGroup$0>;
    inventories?: Array<Inventory$0>;
    inventory?: Inventory$0;
    longDescription?: string;
    manufacturerName?: string;
    manufacturerSku?: string;
    master?: Master$0;
    minOrderQuantity?: number;
    name?: string;
    options?: Array<Option$0>;
    pageDescription?: string;
    pageKeywords?: string;
    pageTitle?: string;
    price?: number;
    pricePerUnit?: number;
    pricePerUnitMax?: number;
    priceMax?: number;
    priceRanges?: Array<PriceRange>;
    prices?: {} & {
        [key: string]: any;
    };
    primaryCategoryId?: string;
    productLinks?: Array<ProductLink$0>;
    productPromotions?: Array<ProductPromotion>;
    recommendations?: Array<Recommendation$0>;
    setProducts?: Array<Product$0>;
    shortDescription?: string;
    stepQuantity?: number;
    tieredPrices?: Array<ProductPriceTable>;
    type?: ProductType$0;
    unit?: string;
    upc?: string;
    validFrom?: any;
    validTo?: any;
    variants?: Array<Variant$0>;
    variationAttributes?: Array<VariationAttribute$0>;
    variationGroups?: Array<VariationGroup$0>;
    variationValues?: {} & {
        [key: string]: any;
    };
} & {
    [key: string]: any;
};
type Image$0 = {
    alt?: string;
    disBaseLink?: string;
    link: string;
    title?: string;
} & {
    [key: string]: any;
};
type VariationAttributeValue$0 = {
    description?: string;
    image?: Image$0;
    imageSwatch?: Image$0;
    name?: string;
    orderable?: boolean;
    value: string;
} & {
    [key: string]: any;
};
type PathRecord = {
    id?: string;
    name?: string;
} & {
    [key: string]: any;
};
/**
 * All path parameters that are used by at least one ShopperProducts method.
 */
type ShopperProductsPathParameters = {
    organizationId?: string;
    id?: string;
};
/**
 * All query parameters that are used by at least one ShopperProducts method.
 */
type ShopperProductsQueryParameters = {
    ids?: string;
    inventoryIds?: string;
    currency?: string;
    locale?: string;
    allImages?: boolean;
    perPricebook?: boolean;
    siteId?: string;
    levels?: number;
};
/**
 * All parameters that are used by ShopperProducts.
 */
type ShopperProductsParameters = ShopperProductsPathParameters & BaseUriParameters & ShopperProductsQueryParameters;
/**
 * [Shopper Products](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-products:Summary)
 * ==================================
 *
 * *Display product details across your storefront.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperProducts } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperProductsClient = new ShopperProducts(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 0.0.19<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
declare class ShopperProducts<ConfigParameters extends ShopperProductsParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/product/shopper-products/{version}";
    constructor(config: ClientConfigInit<ConfigParameters>);
    /**
     * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Along with product details, the availability, images, price, promotions, and variations for the valid products will be included, as appropriate.
     *
     * If you would like to get a raw Response object use the other getProducts function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
     * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
     * @param currency - The currency mnemonic specified for price.
     * @param locale - The locale context.
     * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
     * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type ProductResult.
     *
     */
    getProducts(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            ids: string;
            inventoryIds?: string;
            currency?: string;
            locale?: string;
            allImages?: boolean;
            perPricebook?: boolean;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<ProductResult>;
    /**
     * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Along with product details, the availability, images, price, promotions, and variations for the valid products will be included, as appropriate.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
     * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
     * @param currency - The currency mnemonic specified for price.
     * @param locale - The locale context.
     * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
     * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ProductResult otherwise.
     *
     */
    getProducts<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            ids: string;
            inventoryIds?: string;
            currency?: string;
            locale?: string;
            allImages?: boolean;
            perPricebook?: boolean;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : ProductResult>;
    /**
     * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability, images, price, bundled_products, set_products, recommedations, product options, variations, and promotions for the products will be included, as appropriate.
     *
     * If you would like to get a raw Response object use the other getProduct function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param id - The ID of the requested product.
     * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
     * @param currency - The currency mnemonic specified for price.
     * @param locale - The locale context.
     * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
     * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Product.
     *
     */
    getProduct(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            id: string;
            inventoryIds?: string;
            currency?: string;
            locale?: string;
            allImages?: boolean;
            perPricebook?: boolean;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Product$0>;
    /**
     * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability, images, price, bundled_products, set_products, recommedations, product options, variations, and promotions for the products will be included, as appropriate.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param id - The ID of the requested product.
     * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
     * @param currency - The currency mnemonic specified for price.
     * @param locale - The locale context.
     * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
     * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Product otherwise.
     *
     */
    getProduct<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            id: string;
            inventoryIds?: string;
            currency?: string;
            locale?: string;
            allImages?: boolean;
            perPricebook?: boolean;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Product$0>;
    /**
     * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character. The server only returns online categories.
     *
     * If you would like to get a raw Response object use the other getCategories function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param ids - The comma separated list of category IDs (max 50).
     * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2.
     * @param locale - The locale context.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type CategoryResult.
     *
     */
    getCategories(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            ids: string;
            levels?: number;
            locale?: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<CategoryResult>;
    /**
     * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character. The server only returns online categories.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param ids - The comma separated list of category IDs (max 50).
     * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2.
     * @param locale - The locale context.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type CategoryResult otherwise.
     *
     */
    getCategories<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            ids: string;
            levels?: number;
            locale?: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : CategoryResult>;
    /**
     * When you use the URL template below, the server returns a category identified by its ID; by default, the server
     also returns the first level of subcategories, but you can specify another level by setting the levels
     parameter. The server only returns online categories.
     *
     * If you would like to get a raw Response object use the other getCategory function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param id - The ID of the requested category.
     * @param levels -
     * @param locale -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Category.
     *
     */
    getCategory(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            id: string;
            levels?: number;
            locale?: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<Category>;
    /**
     * When you use the URL template below, the server returns a category identified by its ID; by default, the server
     also returns the first level of subcategories, but you can specify another level by setting the levels
     parameter. The server only returns online categories.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param id - The ID of the requested category.
     * @param levels -
     * @param locale -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Category otherwise.
     *
     */
    getCategory<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            id: string;
            levels?: number;
            locale?: string;
            siteId: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : Category>;
}
type Promotion = {
    calloutMsg?: string;
    currency?: string;
    details?: string;
    endDate?: any;
    id: string;
    image?: string;
    name?: string;
    startDate?: any;
} & {
    [key: string]: any;
};
type PromotionResult = {
    count: number;
    data: Array<Promotion>;
    total: number;
} & {
    [key: string]: any;
};
/**
 * All path parameters that are used by at least one ShopperPromotions method.
 */
type ShopperPromotionsPathParameters = {
    organizationId?: string;
    campaignId?: string;
};
/**
 * All query parameters that are used by at least one ShopperPromotions method.
 */
type ShopperPromotionsQueryParameters = {
    siteId?: string;
    ids?: string;
    locale?: string;
    startDate?: string;
    endDate?: string;
    currency?: string;
};
/**
 * All parameters that are used by ShopperPromotions.
 */
type ShopperPromotionsParameters = ShopperPromotionsPathParameters & BaseUriParameters & ShopperPromotionsQueryParameters;
/**
 * [Shopper Promotions](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-promotions:Summary)
 * ==================================
 *
 * *View details for active promotions.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperPromotions } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperPromotionsClient = new ShopperPromotions(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.0.20<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
declare class ShopperPromotions<ConfigParameters extends ShopperPromotionsParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/pricing/shopper-promotions/{version}";
    constructor(config: ClientConfigInit<ConfigParameters>);
    /**
     * Returns an array of enabled promotions for a list of specified IDs. In the request URL, you can specify up to 50 IDs. If you specify an ID that contains either parentheses or the separator characters, you must URL encode these characters. Each request returns only enabled promotions as the server does not consider promotion qualifiers or schedules.
     *
     * If you would like to get a raw Response object use the other getPromotions function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param ids -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PromotionResult.
     *
     */
    getPromotions(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            ids: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PromotionResult>;
    /**
     * Returns an array of enabled promotions for a list of specified IDs. In the request URL, you can specify up to 50 IDs. If you specify an ID that contains either parentheses or the separator characters, you must URL encode these characters. Each request returns only enabled promotions as the server does not consider promotion qualifiers or schedules.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param ids -
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PromotionResult otherwise.
     *
     */
    getPromotions<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            ids: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PromotionResult>;
    /**
     * Handles get promotion by filter criteria. Returns an array of enabled promotions matching the specified filter
     criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date
     range by providing start_date and end_date parameters. Both parameters are required to specify a date range, as
     omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled
     promotions, since the server does not consider promotion qualifiers or schedules.
     *
     * If you would like to get a raw Response object use the other getPromotionsForCampaign function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param campaignId - Find the promotions assigned to this campaign (mandatory).
     * @param siteId -
     * @param startDate - The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param endDate - The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param currency - The currency mnemonic specified for price. This parameter is effective only for product suggestions.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PromotionResult.
     *
     */
    getPromotionsForCampaign(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            campaignId: string;
            siteId: string;
            startDate?: string;
            endDate?: string;
            currency?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<PromotionResult>;
    /**
     * Handles get promotion by filter criteria. Returns an array of enabled promotions matching the specified filter
     criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date
     range by providing start_date and end_date parameters. Both parameters are required to specify a date range, as
     omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled
     promotions, since the server does not consider promotion qualifiers or schedules.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param campaignId - Find the promotions assigned to this campaign (mandatory).
     * @param siteId -
     * @param startDate - The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param endDate - The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
     * @param currency - The currency mnemonic specified for price. This parameter is effective only for product suggestions.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PromotionResult otherwise.
     *
     */
    getPromotionsForCampaign<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            campaignId: string;
            siteId: string;
            startDate?: string;
            endDate?: string;
            currency?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : PromotionResult>;
}
type ProductRef = {
    id: string;
} & {
    [key: string]: any;
};
type SuggestedTerms = {
    originalTerm: string;
    terms?: Array<SuggestedTerm>;
} & {
    [key: string]: any;
};
type CategorySuggestions = {
    categories?: Array<SuggestedCategory>;
    suggestedPhrases?: Array<SuggestedPhrase>;
    suggestedTerms: Array<SuggestedTerms>;
} & {
    [key: string]: any;
};
type SuggestedProduct = {
    currency: string;
    image?: Image$0;
    price: number;
    productId: string;
    productName: string;
} & {
    [key: string]: any;
};
type SuggestedPhrase = {
    exactMatch: boolean;
    phrase: string;
} & {
    [key: string]: any;
};
type VariationAttribute$1 = {
    id: string;
    name?: string;
    values?: Array<VariationAttributeValue$0>;
} & {
    [key: string]: any;
};
type ProductSuggestions = {
    products?: Array<SuggestedProduct>;
    suggestedPhrases?: Array<SuggestedPhrase>;
    suggestedTerms: Array<SuggestedTerms>;
} & {
    [key: string]: any;
};
type SuggestedCategory = {
    id: string;
    name: string;
    parentCategoryName: string;
} & {
    [key: string]: any;
};
type ProductType$1 = {
    bundle?: boolean;
    item?: boolean;
    master?: boolean;
    option?: boolean;
    set?: boolean;
    variant?: boolean;
    variationGroup?: boolean;
} & {
    [key: string]: any;
};
type BrandSuggestions = {} & {
    [key: string]: any;
};
type ProductSearchRefinementValue = {
    description?: string;
    hitCount: number;
    label: string;
    presentationId?: string;
    value: string;
    values?: Array<ProductSearchRefinementValue>;
} & {
    [key: string]: any;
};
type ProductSearchSortingOption = {
    id: string;
    label: string;
} & {
    [key: string]: any;
};
type SuggestedTerm = {
    completed: boolean;
    corrected: boolean;
    exactMatch: boolean;
    value: string;
} & {
    [key: string]: any;
};
type ProductSearchRefinement = {
    attributeId: string;
    label?: string;
    values?: Array<ProductSearchRefinementValue>;
} & {
    [key: string]: any;
};
type CustomSuggestions = {
    customSuggestion?: string;
    suggestedPhrases?: Array<SuggestedPhrase>;
    suggestedTerms: Array<SuggestedTerms>;
} & {
    [key: string]: any;
};
type ProductSearchHit = {
    currency?: string;
    hitType?: string;
    image?: Image$0;
    orderable?: boolean;
    price?: number;
    priceMax?: number;
    prices?: {} & {
        [key: string]: any;
    };
    productId: string;
    productName?: string;
    productType?: ProductType$1;
    representedProduct?: ProductRef;
    representedProducts?: Array<ProductRef>;
    variationAttributes?: Array<VariationAttribute$1>;
} & {
    [key: string]: any;
};
type ProductSearchResult = {
    limit: number;
    hits: Array<ProductSearchHit>;
    query: string;
    refinements: Array<ProductSearchRefinement>;
    searchPhraseSuggestions: Suggestion;
    selectedRefinements?: {} & {
        [key: string]: any;
    };
    selectedSortingOption?: string;
    sortingOptions: Array<ProductSearchSortingOption>;
    offset: number;
    total: number;
} & {
    [key: string]: any;
};
type SuggestionResult = {
    brandSuggestions?: BrandSuggestions;
    categorySuggestions?: CategorySuggestions;
    productSuggestions?: ProductSuggestions;
    customSuggestion?: CustomSuggestions;
    searchPhrase: string;
} & {
    [key: string]: any;
};
/**
 * All path parameters that are used by at least one ShopperSearch method.
 */
type ShopperSearchPathParameters = {
    organizationId?: string;
};
/**
 * All query parameters that are used by at least one ShopperSearch method.
 */
type ShopperSearchQueryParameters = {
    siteId?: string;
    q?: string;
    refine?: Array<string>;
    sort?: string;
    currency?: string;
    locale?: string;
    offset?: any;
    limit?: number;
};
/**
 * All parameters that are used by ShopperSearch.
 */
type ShopperSearchParameters = ShopperSearchPathParameters & BaseUriParameters & ShopperSearchQueryParameters;
/**
 * [Shopper Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-search:Summary)
 * ==================================
 *
 * *product search and helpful search suggestions.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperSearch } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperSearchClient = new ShopperSearch(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.0.24<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
declare class ShopperSearch<ConfigParameters extends ShopperSearchParameters & Record<string, unknown>> {
    // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
    clientConfig: ClientConfig<ConfigParameters> & {
        baseUri: string;
    };
    static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/search/shopper-search/{version}/";
    constructor(config: ClientConfigInit<ConfigParameters>);
    /**
     * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
     the product search hit. The search result contains only products that are online and assigned to site catalog.
     *
     * If you would like to get a raw Response object use the other productSearch function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
     * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
     values are separated by '='. Multiple values are supported by a subset of refinement attributes and
     can be provided by separating them using a pipe (URL
     encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
     The following system refinement attribute ids are supported:
     
     cgid: Allows refinement per single category ID. Multiple category ids are not supported.
     price: Allows refinement per single price range. Multiple price ranges are not supported.
     pmid: Allows refinement per promotion ID.
     htypes: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
     orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
     * @param sort - The ID of the sorting option to sort the search hits.
     * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
     * @param locale -
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type ProductSearchResult.
     *
     */
    productSearch(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            q?: string;
            refine?: Array<string>;
            sort?: string;
            currency?: string;
            locale?: string;
            offset?: any;
            limit?: number;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<ProductSearchResult>;
    /**
     * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
     the product search hit. The search result contains only products that are online and assigned to site catalog.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
     * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
     values are separated by '='. Multiple values are supported by a subset of refinement attributes and
     can be provided by separating them using a pipe (URL
     encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
     The following system refinement attribute ids are supported:
     
     cgid: Allows refinement per single category ID. Multiple category ids are not supported.
     price: Allows refinement per single price range. Multiple price ranges are not supported.
     pmid: Allows refinement per promotion ID.
     htypes: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
     orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
     * @param sort - The ID of the sorting option to sort the search hits.
     * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
     * @param locale -
     * @param offset -
     * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ProductSearchResult otherwise.
     *
     */
    productSearch<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            q?: string;
            refine?: Array<string>;
            sort?: string;
            currency?: string;
            locale?: string;
            offset?: any;
            limit?: number;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : ProductSearchResult>;
    /**
     * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
     *
     * If you would like to get a raw Response object use the other getSearchSuggestions function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
     * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
     * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type SuggestionResult.
     *
     */
    getSearchSuggestions(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            q: string;
            limit?: number;
            currency?: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>): Promise<SuggestionResult>;
    /**
     * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
     * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
     * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
     * @param locale -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type SuggestionResult otherwise.
     *
     */
    getSearchSuggestions<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
        parameters?: CompositeParameters<{
            organizationId: string;
            siteId: string;
            q: string;
            limit?: number;
            currency?: string;
            locale?: string;
        }, ConfigParameters>;
        headers?: {
            [key: string]: string;
        };
    }>, rawResponse?: T): Promise<T extends true ? Response : SuggestionResult>;
}
declare class TemplateURL extends URL {
    /**
     * @param url -
     * @param base -
     */
    constructor(url: string, base: string, parameters?: {
        pathParams?: PathParameters;
        queryParams?: QueryParameters;
        origin?: string;
    });
    /**
     * Replace the origin (protocol/host) portion of the URL with a new origin.
     * The path portion is retained and concatenated with any path included in the
     * new origin. Thee primary use of this function is to use a proxy.
     *
     * @param newOriginString - The new origin to substitute (ex: https://example.com)
     */
    replaceOrigin(newOriginString: string): void;
    /**
     * Add append an object literal of query parameters to the URL object. Arrays
     * are allowed and are appended using the "repeat" convention where the \{ a:
     * ["1", "2"] \} becomes "?a=1&a=2"
     */
    addQueryParams(queryParams?: QueryParameters): void;
    /**
     * Replace bracketed URL template parameters with values from parameters object
     *
     * @param template - The URL template string to make substitutions in
     * @param parameters - The object literal that provides the values to substitute
     *
     * @returns String URL with substitutions made
     */
    static renderTemplateUri(template: string, parameters?: PathParameters): string;
}
declare namespace helpers {
    /*
    * Copyright (c) 2022, Salesforce, Inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    const isBrowser: boolean;
    const isNode: boolean;
    /*
    * Copyright (c) 2021, salesforce.com, inc.
    * All rights reserved.
    * SPDX-License-Identifier: BSD-3-Clause
    * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
    */
    type CompositeParameters<MethodParameters extends Record<string, unknown>, ConfigParameters extends Record<string, unknown>> = Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>;
    type RequireParametersUnlessAllAreOptional<T extends {
        parameters?: Record<string, unknown>;
    }> = Record<string, never> extends NonNullable<T["parameters"]> ? T : T & Required<Pick<T, "parameters">>;
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string;
        version?: string; // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean;
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[];
    }
    /**
     * Generic interface for all parameter types.
     */
    type UrlParameters = PathParameters | QueryParameters;
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit;
    /**
     * Any properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit;
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string;
        proxy?: string;
        headers?: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions?: FetchOptions;
        transformRequest?: (data: unknown, headers: {
            [key: string]: string;
        }) => Required<FetchOptions>["body"];
        throwOnBadResponse?: boolean;
    }
    /**
     * Configuration parameters common to Commerce SDK clients
     */
    class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
        baseUri?: string;
        proxy?: string;
        headers: {
            [key: string]: string;
        };
        parameters: Params;
        fetchOptions: FetchOptions;
        transformRequest: NonNullable<ClientConfigInit<Params>["transformRequest"]>;
        throwOnBadResponse: boolean;
        constructor(config: ClientConfigInit<Params>);
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, "transformRequest">;
    }
    type LoginRequest = {
        client_id?: string;
        response_type?: string;
        redirect_uri: string;
        state?: string;
        scope?: string;
        usid?: string;
        channel_id: string;
        code_challenge: string;
    } & {
        [key: string]: any;
    };
    type PasswordLessTokenRequest = {
        grant_type: string;
        hint: string;
        pwdless_token: string;
        usid?: string;
    } & {
        [key: string]: any;
    };
    type IntrospectResponse = {
        active: boolean;
        scope: string;
        client_id: string;
        sub: string;
        exp: number;
        username: string;
        token_type: string;
    } & {
        [key: string]: any;
    };
    type CredQualityUserResponse = {
        tenantId: string;
        username: string;
        email: string;
        credQualityMeasure: number;
        pwdStrengthMeasure: number;
        pwdQualityMeasure: number;
        credChangeCount: number;
        loginCount: number;
        lastLoginDatetime: any;
        lastCredCheckDatetime: any;
    } & {
        [key: string]: any;
    };
    type Oauth2ErrorResponse = {
        error: string;
        error_uri?: string;
        error_description?: string;
    } & {
        [key: string]: any;
    };
    type ErrorResponse = {
        type: string;
        title?: string;
        detail?: string;
        instance?: string;
    } & {
        [key: string]: any;
    };
    type TrustedSystemTokenRequest = {
        usid?: string;
        grant_type: string;
        hint: string;
        login_id: string;
        idp_origin: string;
        client_id: string;
        channel_id: string;
    } & {
        [key: string]: any;
    };
    type TokenResponse = {
        access_token: string;
        id_token: string;
        refresh_token: string;
        expires_in: number;
        token_type: string;
        usid: string;
        customer_id: string;
        enc_user_id: string;
    } & {
        [key: string]: any;
    };
    type TokenRequest = {
        refresh_token?: string;
        code?: string;
        usid?: string;
        grant_type: string;
        redirect_uri?: string;
        code_verifier?: string;
        client_id?: string;
    } & {
        [key: string]: any;
    };
    type PasswordLessAuthRequest = {
        user_id: string;
        mode: string;
        channel_id: string;
    } & {
        [key: string]: any;
    };
    type TokenActionRequest = {
        token: string;
        token_type_hint?: string;
    } & {
        [key: string]: any;
    };
    type Money = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResult = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type SearchRequest = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type PropertyDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    } & {
        [key: string]: any;
    };
    type LocalizedString = {} & {
        [key: string]: any;
    };
    type PaginatedSearchResult = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type ClosedObject = {} & {
        [key: string]: any;
    };
    type OpenObject = {} & {
        [key: string]: any;
    };
    type NoPropertiesAllowed = {};
    type SpecifiedPropertiesAllowed = {} & {
        [key: string]: any;
    };
    type BoolFilter = {
        filters?: Array<any>;
        operator: string;
    } & {
        [key: string]: any;
    };
    type PaginatedSearchResultBase = {
        query: any;
        sorts?: Array<Sort>;
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type MatchAllQuery = {} & {
        [key: string]: any;
    };
    type FilteredQuery = {
        filter: any;
        query: any;
    } & {
        [key: string]: any;
    };
    type QueryFilter = {
        query: any;
    } & {
        [key: string]: any;
    };
    type Query = {
        boolQuery?: BoolQuery;
        filteredQuery?: FilteredQuery;
        matchAllQuery?: MatchAllQuery;
        nestedQuery?: NestedQuery;
        termQuery?: TermQuery;
        textQuery?: TextQuery;
    } & {
        [key: string]: any;
    };
    type TermQuery = {
        fields: Array<string>;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TermFilter = {
        field: string;
        operator: string;
        values?: Array<any>;
    } & {
        [key: string]: any;
    };
    type TextQuery = {
        fields: Array<string>;
        searchPhrase: string;
    } & {
        [key: string]: any;
    };
    type Range2Filter = {
        filterMode?: string;
        fromField: string;
        fromInclusive?: boolean;
        fromValue?: any;
        toField: string;
        toInclusive?: boolean;
        toValue?: any;
    } & {
        [key: string]: any;
    };
    type BoolQuery = {
        must?: Array<any>;
        mustNot?: Array<any>;
        should?: Array<any>;
    } & {
        [key: string]: any;
    };
    type SimpleSearchResultBase = {
        limit: number;
        hits?: Array<object>;
        offset: any;
        total: any;
    } & {
        [key: string]: any;
    };
    type NestedQuery = {
        path: string;
        query: any;
        scoreMode?: string;
    } & {
        [key: string]: any;
    };
    type Filter = {
        boolFilter?: BoolFilter;
        queryFilter?: QueryFilter;
        range2Filter?: Range2Filter;
        rangeFilter?: RangeFilter;
        termFilter?: TermFilter;
    } & {
        [key: string]: any;
    };
    type Sort = {
        field: string;
        sortOrder?: string;
    } & {
        [key: string]: any;
    };
    type RangeFilter = {
        field: string;
        from?: any;
        fromInclusive?: boolean;
        to?: any;
        toInclusive?: boolean;
    } & {
        [key: string]: any;
    };
    type SearchRequestBase = {
        limit?: number;
        query: any;
        sorts?: Array<Sort>;
        offset?: any;
    } & {
        [key: string]: any;
    };
    type MoneyMnemonic = {
        currencyMnemonic?: string;
        value?: number;
    } & {
        [key: string]: any;
    };
    type L10nString = {} & {
        [key: string]: any;
    };
    type AttributeDefinition = {
        defaultValue?: PropertyValueDefinition;
        id?: string;
        name: L10nString;
        description: L10nString;
        key?: boolean;
        localizable?: boolean;
        mandatory?: boolean;
        max?: number;
        minLength?: number;
        min?: number;
        multiValueType?: boolean;
        regularExpression?: string;
        scale?: number;
        searchable?: boolean;
        siteSpecific?: boolean;
        system?: boolean;
        unit?: L10nString;
        possibleValues?: Array<PropertyValueDefinition>;
        type: string;
        visible?: boolean;
    };
    type PropertyValueDefinition = {
        description: L10nString;
        displayValue: L10nString;
        id: string;
        position?: number;
        value: string;
    };
    /**
     * All path parameters that are used by at least one ShopperLogin method.
     */
    type ShopperLoginPathParameters = {
        organizationId?: string;
    };
    /**
     * All query parameters that are used by at least one ShopperLogin method.
     */
    type ShopperLoginQueryParameters = {
        username?: string;
        client_id?: string;
        refresh_token?: string;
        channel_id?: string;
        redirect_uri?: string;
        response_type?: string;
        scope?: string;
        state?: string;
        usid?: string;
        hint?: string;
        code_challenge?: string;
    };
    /**
     * All parameters that are used by ShopperLogin.
     */
    type ShopperLoginParameters = ShopperLoginPathParameters & BaseUriParameters & ShopperLoginQueryParameters;
    /**
     * [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary)
     * ==================================
     *
     * *Enable shoppers to log in more easily, stay logged in for longer, and get a more fluid and personalized shopping experience powered by Shopper APIs.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperLogin } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperLoginClient = new ShopperLogin(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.24.0<br />
     * Last Updated: <br />
     * </span>
     
     *
     
     */
    class ShopperLogin<ConfigParameters extends ShopperLoginParameters & Record<string, unknown>> {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string;
        };
        static readonly defaultBaseUri = "https://{shortCode}.api.commercecloud.salesforce.com/shopper/auth/{version}";
        constructor(config: ClientConfigInit<ConfigParameters>);
        /**
         * Retrieve credential quality statistics for a user.
         *
         * If you would like to get a raw Response object use the other retrieveCredQualityUserInfo function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param username - User's login id or email address.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CredQualityUserResponse.
         *
         */
        retrieveCredQualityUserInfo(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                username: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<CredQualityUserResponse>;
        /**
         * Retrieve credential quality statistics for a user.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param username - User's login id or email address.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CredQualityUserResponse otherwise.
         *
         */
        retrieveCredQualityUserInfo<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                username: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : CredQualityUserResponse>;
        /**
         * Get authorization code after authenticating a user using an ECOM instance.
         *
         * If you would like to get a raw Response object use the other authenticateCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        authenticateCustomer(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: LoginRequest;
        }>): Promise<void>;
        /**
         * Get authorization code after authenticating a user using an ECOM instance.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        authenticateCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: LoginRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Allows the customer to authenticate when their identity provider is down.
         *
         * If you would like to get a raw Response object use the other authorizePasswordlessCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Object.
         *
         */
        authorizePasswordlessCustomer(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordLessAuthRequest;
        }>): Promise<Object>;
        /**
         * Allows the customer to authenticate when their identity provider is down.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        authorizePasswordlessCustomer<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordLessAuthRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * Log a shopper out.
         *
         * If you would like to get a raw Response object use the other logoutCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS client ID.
         * @param refresh_token - Refresh token that was given during the access token request.
         * @param channel_id - The channel_id parameter is a MUST (required) if the shopper authenticated using the /login with ECOM.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        logoutCustomer(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                client_id: string;
                refresh_token: string;
                channel_id?: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<TokenResponse>;
        /**
         * Log a shopper out.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS client ID.
         * @param refresh_token - Refresh token that was given during the access token request.
         * @param channel_id - The channel_id parameter is a MUST (required) if the shopper authenticated using the /login with ECOM.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        logoutCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                client_id: string;
                refresh_token: string;
                channel_id?: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Get authorization code after authenticating a user against an IDP. This is the first step of the Authorization code grant flow, where a user is able to log in via federation to the IDP configured for the client, and gets an authorization code after successful login via a callback/redirect URI. Mandatory fields are the shopping app's clientId, redirectURI, responseType and authType. This API can be called from the front channel (from the browser).
         *
         * If you would like to get a raw Response object use the other authorizeCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered.
         * @param response_type - Must be 'code'. 'code' indicates that the client wants an authorization code (authorization code grant flow).
         * @param client_id - The client ID obtained during application registration.
         * @param scope - (Not Supported)
         * @param state - Value to be sent by the client to determine the state between the authorization request and the server response.  Optional but strongly recommended.
         * @param usid - ID that uniquely identifies the shopper much like a UUID. This is an optional field, a new USID will be generated if this field is empty.
         * @param hint - IDP name that can be optionally added to redirect directly to skipping the IDP selection step.<br/><br/>To use a public client the hint should be set to <b>guest</b> and a public client id should be used to get an authorization code.
         * @param channel_id - The channel this request is for. For an ECOM request this is angalous to the site ID.
         * @param code_challenge - Created by the client calling the login endpoint.<br><br>The code_challenge is created by SHA256 hashing the code_verifier and base64 URL encoding the resulting hash Base64UrlEncode(SHA256Hash(code_verifier).<br><br>The code verifier should be a high-entropy cryptographic random string with a minimum of 43 characters and a maximum of 128 characters.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        authorizeCustomer(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                redirect_uri: string;
                response_type: string;
                client_id: string;
                scope?: string;
                state?: string;
                usid?: string;
                hint?: string;
                channel_id?: string;
                code_challenge: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<void>;
        /**
         * Get authorization code after authenticating a user against an IDP. This is the first step of the Authorization code grant flow, where a user is able to log in via federation to the IDP configured for the client, and gets an authorization code after successful login via a callback/redirect URI. Mandatory fields are the shopping app's clientId, redirectURI, responseType and authType. This API can be called from the front channel (from the browser).
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered.
         * @param response_type - Must be 'code'. 'code' indicates that the client wants an authorization code (authorization code grant flow).
         * @param client_id - The client ID obtained during application registration.
         * @param scope - (Not Supported)
         * @param state - Value to be sent by the client to determine the state between the authorization request and the server response.  Optional but strongly recommended.
         * @param usid - ID that uniquely identifies the shopper much like a UUID. This is an optional field, a new USID will be generated if this field is empty.
         * @param hint - IDP name that can be optionally added to redirect directly to skipping the IDP selection step.<br/><br/>To use a public client the hint should be set to <b>guest</b> and a public client id should be used to get an authorization code.
         * @param channel_id - The channel this request is for. For an ECOM request this is angalous to the site ID.
         * @param code_challenge - Created by the client calling the login endpoint.<br><br>The code_challenge is created by SHA256 hashing the code_verifier and base64 URL encoding the resulting hash Base64UrlEncode(SHA256Hash(code_verifier).<br><br>The code verifier should be a high-entropy cryptographic random string with a minimum of 43 characters and a maximum of 128 characters.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        authorizeCustomer<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                redirect_uri: string;
                response_type: string;
                client_id: string;
                scope?: string;
                state?: string;
                usid?: string;
                hint?: string;
                channel_id?: string;
                code_challenge: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : void>;
        /**
         * Get the shopper or guest JWT/access token, along with a refresh token. This is the second step of the OAuth2 Authorization code flow where a client app is able to get an access token for the shopper through the backchannel (a trusted server side) by passing in the client credentials and the authorization code retrieved from authorize endpoint. Mandatory fields when using the token endpoint to get the access token are clientId, clientSecret, authorizationCode, grantType of authorization_code. \<br/\>\<br/\> As a guest user get the shopper JWT / access token along with a refresh token. This is where a client app is able to get an access token for the guest user through the back-channel (a trusted server side) by passing in the client credentials. Mandatory fields when asking for the guest token endpoint to get the access token are clientId, clientSecret, grantType of client_credentials.\<br/\>\<br/\>When refreshing the access token with a private client id and secret the refresh token will NOT be re-generated, but when refreshing the access token with a public client id the refresh token will aways be re-generated (i.e, old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token).\<br/\>\<br/\>Mandatory fields when using the token endpoint with a private client id to refresh an access token are grant_type, or refresh_token.\<br/\>\<br/\>Mandatory fields when using the token endpoint with a public client id to refresh an access token are grant_type and refresh_token with the client_id as a query parameter.\<br/\>\<br/\>Valid grant types for the token endpoint are REFRESH_TOKEN, CLIENT_CREDENTIALS, AUTHORIZATION_CODE_PKCE.
         *
         * If you would like to get a raw Response object use the other getAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Get the shopper or guest JWT/access token, along with a refresh token. This is the second step of the OAuth2 Authorization code flow where a client app is able to get an access token for the shopper through the backchannel (a trusted server side) by passing in the client credentials and the authorization code retrieved from authorize endpoint. Mandatory fields when using the token endpoint to get the access token are clientId, clientSecret, authorizationCode, grantType of authorization_code. \<br/\>\<br/\> As a guest user get the shopper JWT / access token along with a refresh token. This is where a client app is able to get an access token for the guest user through the back-channel (a trusted server side) by passing in the client credentials. Mandatory fields when asking for the guest token endpoint to get the access token are clientId, clientSecret, grantType of client_credentials.\<br/\>\<br/\>When refreshing the access token with a private client id and secret the refresh token will NOT be re-generated, but when refreshing the access token with a public client id the refresh token will aways be re-generated (i.e, old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token).\<br/\>\<br/\>Mandatory fields when using the token endpoint with a private client id to refresh an access token are grant_type, or refresh_token.\<br/\>\<br/\>Mandatory fields when using the token endpoint with a public client id to refresh an access token are grant_type and refresh_token with the client_id as a query parameter.\<br/\>\<br/\>Valid grant types for the token endpoint are REFRESH_TOKEN, CLIENT_CREDENTIALS, AUTHORIZATION_CODE_PKCE.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Get a shopper JWT/access token for registered customers whose credentials are stored using a third party system.\</br\>\</br\>Mandatory fields for \<b\>Trusted On Behalf Of\</b\> to get an access token are grant_type, hint, login_id, login_origin, and channel_id.\</br\>\</br\>Valid grant type for \<b\>Trusted On Behalf Of\</b\> is \<i\>client_credentials.\</i\>\</br\>\</br\>For\<b\>Trusted System External On Behalf Of\</b\> a basic auth authorization header of SLAS client id and SLAS client secret should be used in place of the bearer Token.\</br\>\</br\>For \<b\>Trusted System Internal On Behalf Of \</b\>the authorization header bearer token should be a C2C JWT.\</br\>
         *
         * If you would like to get a raw Response object use the other getTrustedSystemAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getTrustedSystemAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TrustedSystemTokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Get a shopper JWT/access token for registered customers whose credentials are stored using a third party system.\</br\>\</br\>Mandatory fields for \<b\>Trusted On Behalf Of\</b\> to get an access token are grant_type, hint, login_id, login_origin, and channel_id.\</br\>\</br\>Valid grant type for \<b\>Trusted On Behalf Of\</b\> is \<i\>client_credentials.\</i\>\</br\>\</br\>For\<b\>Trusted System External On Behalf Of\</b\> a basic auth authorization header of SLAS client id and SLAS client secret should be used in place of the bearer Token.\</br\>\</br\>For \<b\>Trusted System Internal On Behalf Of \</b\>the authorization header bearer token should be a C2C JWT.\</br\>
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getTrustedSystemAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TrustedSystemTokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Issue a shopper token (JWT).
         *
         * If you would like to get a raw Response object use the other getPasswordLessAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getPasswordLessAccessToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordLessTokenRequest;
        }>): Promise<TokenResponse>;
        /**
         * Issue a shopper token (JWT).
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getPasswordLessAccessToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: PasswordLessTokenRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Invalidate the refresh token. A basic auth header with base64 encoded clientId:secret is required in the Authorization header, and the refresh token to be revoked is required in the body.
         *
         * If you would like to get a raw Response object use the other revokeToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        revokeToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>): Promise<TokenResponse>;
        /**
         * Invalidate the refresh token. A basic auth header with base64 encoded clientId:secret is required in the Authorization header, and the refresh token to be revoked is required in the body.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        revokeToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : TokenResponse>;
        /**
         * Returns the token properties. A basic auth header with base64 encoded clientId:secret is required in the Authorization header, as well as an access token or refresh token. Use token_type_hint to help identify the token.
         *
         * If you would like to get a raw Response object use the other introspectToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Object.
         *
         */
        introspectToken(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>): Promise<Object>;
        /**
         * Returns the token properties. A basic auth header with base64 encoded clientId:secret is required in the Authorization header, as well as an access token or refresh token. Use token_type_hint to help identify the token.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        introspectToken<T extends boolean>(options: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
            body: TokenActionRequest;
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * Returns a JSON document with claims about the currently authenticated end user.
         *
         * If you would like to get a raw Response object use the other getUserInfo function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer this is angalous to the site ID. This is a required parameter when getting user information for an ECOM customer.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
        getUserInfo(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                channel_id?: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Object>;
        /**
         * Returns a JSON document with claims about the currently authenticated end user.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer this is angalous to the site ID. This is a required parameter when getting user information for an ECOM customer.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        getUserInfo<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
                channel_id?: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
         *
         * If you would like to get a raw Response object use the other getWellknownOpenidConfiguration function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
        getWellknownOpenidConfiguration(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Object>;
        /**
         * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        getWellknownOpenidConfiguration<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
        /**
         * Returns a JWKS containing public keys that enable clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
         *
         * If you would like to get a raw Response object use the other getJwksUri function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
        getJwksUri(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>): Promise<Object>;
        /**
         * Returns a JWKS containing public keys that enable clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        getJwksUri<T extends boolean>(options?: RequireParametersUnlessAllAreOptional<{
            parameters?: CompositeParameters<{
                organizationId: string;
            }, ConfigParameters>;
            headers?: {
                [key: string]: string;
            };
        }>, rawResponse?: T): Promise<T extends true ? Response : Object>;
    }
    const stringToBase64: typeof btoa;
    /**
     * Parse out the code and usid from a redirect url
     * @param urlString A url that contains `code` and `usid` query parameters, typically returned when calling a Shopper Login endpoint
     * @returns An object containing the code and usid.
     */
    const getCodeAndUsidFromUrl: (urlString: string) => {
        code: string;
        usid: string;
    };
    /**
     * Creates a random string to use as a code verifier. This code is created by the client and sent with both the authorization request (as a code challenge) and the token request.
     * @returns code verifier
     */
    const createCodeVerifier: () => string;
    /**
     * Encodes a code verifier to a code challenge to send to the authorization endpoint
     * @param codeVerifier random string to use as a code verifier
     * @returns code challenge
     */
    const generateCodeChallenge: (codeVerifier: string) => Promise<string>;
    /**
     * Wrapper for the authorization endpoint. For federated login (3rd party IDP non-guest), the caller should redirect the user to the url in the url field of the returned object. The url will be the login page for the 3rd party IDP and the user will be sent to the redirectURI on success. Guest sessions return the code and usid directly with no need to redirect.
     * @param slasClient a configured instance of the ShopperLogin SDK client
     * @param codeVerifier - random string created by client app to use as a secret in the request
     * @param parameters - Request parameters used by the `authorizeCustomer` endpoint.
     * @param parameters.redirectURI - the location the client will be returned to after successful login with 3rd party IDP. Must be registered in SLAS.
     * @param parameters.hint? - optional string to hint at a particular IDP. Guest sessions are created by setting this to 'guest'
     * @param parameters.usid? - optional saved SLAS user id to link the new session to a previous session
     * @returns login url, user id and authorization code if available
     */
    function authorize(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
    }>, codeVerifier: string, parameters: {
        redirectURI: string;
        hint?: string;
        usid?: string;
    }): Promise<{
        code: string;
        url: string;
        usid: string;
    }>;
    /**
     * A single function to execute the ShopperLogin Public Client Guest Login with proof key for code exchange flow as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary).
     * @param slasClient a configured instance of the ShopperLogin SDK client.
     * @param parameters - parameters to pass in the API calls.
     * @param parameters.redirectURI - Per OAuth standard, a valid app route. Must be listed in your SLAS configuration. On server, this will not be actually called. On browser, this will be called, but ignored.
     * @param parameters.usid? - Unique Shopper Identifier to enable personalization.
     * @returns TokenResponse
     */
    function loginGuestUser(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
    }>, parameters: {
        redirectURI: string;
        usid?: string;
    }): Promise<TokenResponse>;
    /**
     * A single function to execute the ShopperLogin Public Client Registered User B2C Login with proof key for code exchange flow as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary).
     * @param slasClient a configured instance of the ShopperLogin SDK client.
     * @param credentials - the id and password to login with.
     * @param credentials.username - the id of the user to login with.
     * @param credentials.password - the password of the user to login with.
     * @param parameters - parameters to pass in the API calls.
     * @param parameters.redirectURI - Per OAuth standard, a valid app route. Must be listed in your SLAS configuration. On server, this will not be actually called. On browser, this will be called, but ignored.
     * @param parameters.usid? - Unique Shopper Identifier to enable personalization.
     * @returns TokenResponse
     */
    function loginRegisteredUserB2C(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
    }>, credentials: {
        username: string;
        password: string;
    }, parameters: {
        redirectURI: string;
        usid?: string;
    }): Promise<TokenResponse>;
    /**
     * Exchange a refresh token for a new access token.
     * @param slasClient a configured instance of the ShopperLogin SDK client.
     * @param parameters - parameters to pass in the API calls.
     * @param parameters.refreshToken - a valid refresh token to exchange for a new access token (and refresh token).
     * @returns TokenResponse
     */
    function refreshAccessToken(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
    }>, parameters: {
        refreshToken: string;
    }): Promise<TokenResponse>;
    /**
     * Logout a shopper. The shoppers access token and refresh token will be revoked and if the shopper authenticated with ECOM the OCAPI JWT will also be revoked.
     * @param slasClient a configured instance of the ShopperLogin SDK client.
     * @param parameters - parameters to pass in the API calls.
     * @param parameters.refreshToken - a valid refresh token to exchange for a new access token (and refresh token).
     * @returns TokenResponse
     */
    function logout(slasClient: ShopperLogin<{
        shortCode: string;
        organizationId: string;
        clientId: string;
        siteId: string;
    }>, parameters: {
        refreshToken: string;
    }): Promise<TokenResponse>;
}
export { ShopperBaskets, ShopperContexts, ShopperCustomers, ShopperDiscoverySearch, ShopperGiftCertificates, ShopperLogin, ShopperOrders, ShopperProducts, ShopperPromotions, ShopperSearch, ClientConfig, TemplateURL, helpers };
export type { ClientConfigInit };
