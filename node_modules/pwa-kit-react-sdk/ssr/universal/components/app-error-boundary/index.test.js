"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = require("./index");

var errors = _interopRequireWildcard(require("../../errors"));

var _sinon = _interopRequireDefault(require("sinon"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
describe('AppErrorBoundary', () => {
  const cases = [{
    content: /*#__PURE__*/_react.default.createElement("p", null, "test 1"),
    errorFactory: () => new errors.HTTPNotFound('Not found'),
    afterErrorAssertions: wrapper => {
      expect(wrapper.contains( /*#__PURE__*/_react.default.createElement("h1", null, "Error Status: 404"))).toBe(true);
      expect(wrapper.contains( /*#__PURE__*/_react.default.createElement("pre", null, "Not found"))).toBe(true);
    },
    variation: 'SDK HTTP Errors'
  }, {
    content: /*#__PURE__*/_react.default.createElement("p", null, "test 2"),
    errorFactory: () => new Error('Some other error'),
    afterErrorAssertions: wrapper => {
      expect(wrapper.contains( /*#__PURE__*/_react.default.createElement("h1", null, "Error Status: 500"))).toBe(true);
      expect(wrapper.contains( /*#__PURE__*/_react.default.createElement("pre", null, "Error: Some other error"))).toBe(true);
    },
    variation: 'Generic Javascript Errors'
  }, {
    content: /*#__PURE__*/_react.default.createElement("p", null, "test 3"),
    errorFactory: () => 'Some string error',
    afterErrorAssertions: wrapper => {
      expect(wrapper.contains( /*#__PURE__*/_react.default.createElement("h1", null, "Error Status: 500"))).toBe(true);
      expect(wrapper.contains( /*#__PURE__*/_react.default.createElement("pre", null, "Some string error"))).toBe(true);
    },
    variation: 'Error Strings'
  }, {
    content: /*#__PURE__*/_react.default.createElement("p", null, "test 4"),
    errorFactory: () => undefined,
    afterErrorAssertions: wrapper => {
      expect(wrapper.find('Error').prop('message')).toBe('');
    },
    variation: 'Check for message value to be empty if undefined'
  }];
  cases.forEach(({
    content,
    errorFactory,
    afterErrorAssertions,
    variation
  }) => {
    test(`Displays errors correctly (variation: ${variation})`, () => {
      const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.AppErrorBoundaryWithoutRouter, null, content));
      expect(wrapper.contains(content)).toBe(true);
      wrapper.instance().onGetPropsError(errorFactory());
      wrapper.update();
      expect(wrapper.contains(content)).toBe(false);
      afterErrorAssertions(wrapper);
    });
    test(`Watches history, when provided (variation: ${variation})`, () => {
      const history = {
        listen: _sinon.default.stub().returns(_sinon.default.stub())
      };
      const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.AppErrorBoundaryWithoutRouter, {
        history: history
      }, content));
      expect(wrapper.contains(content)).toBe(true);
      wrapper.instance().onGetPropsError(errorFactory());
      wrapper.update();
      expect(wrapper.contains(content)).toBe(false);
      afterErrorAssertions(wrapper);
    });
  });
  test(`Display Error message from getDerivedStateFromError`, () => {
    const error = new Error('test');

    const result = _index.AppErrorBoundaryWithoutRouter.getDerivedStateFromError(error);

    expect(result.error.message).toEqual(error.toString());
  });
});