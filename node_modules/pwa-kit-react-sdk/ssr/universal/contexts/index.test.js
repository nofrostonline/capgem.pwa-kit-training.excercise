"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _reactRouterDom = require("react-router-dom");

var _history = require("history");

var _index = require("./index");

var _hooks = require("../hooks");

var _crypto = _interopRequireDefault(require("crypto"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const SampleProvider = props => {
  const {
    correlationId,
    resetOnPageChange
  } = props;
  return /*#__PURE__*/_react.default.createElement(_index.CorrelationIdProvider, {
    correlationId: correlationId,
    resetOnPageChange: resetOnPageChange
  }, props.children);
};

SampleProvider.propTypes = {
  children: _propTypes.default.element.isRequired,
  resetOnPageChange: _propTypes.default.bool,
  correlationId: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]).isRequired
};

const Component = () => {
  const {
    correlationId
  } = (0, _hooks.useCorrelationId)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: 'correlation-id'
  }, correlationId);
};

describe('CorrelationIdProvider', function () {
  test('Renders without errors', () => {
    const history = (0, _history.createMemoryHistory)();

    const id = _crypto.default.randomUUID();

    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.Router, {
      history: history
    }, /*#__PURE__*/_react.default.createElement(SampleProvider, {
      correlationId: () => id
    }, /*#__PURE__*/_react.default.createElement(Component, null))));
    expect(wrapper.find(Component)).toHaveLength(1);
  });
  test('renders when correlationId is passed as a function', () => {
    const id = _crypto.default.randomUUID();

    const history = (0, _history.createMemoryHistory)();
    const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.Router, {
      history: history
    }, /*#__PURE__*/_react.default.createElement(SampleProvider, {
      correlationId: () => id
    }, /*#__PURE__*/_react.default.createElement(Component, null))));
    expect(wrapper.text().includes(id)).toBe(true);
  });
  test('renders when correlationId is passed as a string', () => {
    const id = _crypto.default.randomUUID();

    const history = (0, _history.createMemoryHistory)();
    const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.Router, {
      history: history
    }, /*#__PURE__*/_react.default.createElement(SampleProvider, {
      correlationId: id,
      resetOnPageChange: false
    }, /*#__PURE__*/_react.default.createElement(Component, null))));
    expect(wrapper.text().includes(id)).toBe(true);
  });
  test('generates a new id when changing page', () => {
    const history = (0, _history.createMemoryHistory)();

    const Component = () => {
      const {
        correlationId
      } = (0, _hooks.useCorrelationId)();
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
        className: "correlation-id"
      }, correlationId), /*#__PURE__*/_react.default.createElement("button", {
        className: "button",
        onClick: () => history.push('/page-1')
      }, "Go to another page"));
    };

    const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.Router, {
      history: history
    }, /*#__PURE__*/_react.default.createElement(SampleProvider, {
      correlationId: () => _crypto.default.randomUUID()
    }, /*#__PURE__*/_react.default.createElement(Component, null))));
    const firstRenderedId = wrapper.find('.correlation-id').text();
    const button = wrapper.find('.button');
    button.simulate('click');
    const secondRenderedId = wrapper.find('.correlation-id').text(); // expecting the provider to have a different correlation id when a page navigation happens

    expect(firstRenderedId).not.toEqual(secondRenderedId);
  });
});